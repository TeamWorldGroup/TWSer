{"version":3,"sources":["index.js"],"names":["mc","require","EventEmitter","path","requireIndex","register","process","env","NODE_ENV","module","exports","createMCServer","Behavior","Command","version","generations","experience","UserError","portal_detector","options","mcServer","MCServer","connect","_server","plugins","join","__dirname","createServer","filter","pluginName","server","undefined","forEach","logging","createLog","on","emit","error","socketServer","address","port"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,KAAKC,QAAQ,oBAAR,CAAX;AACA,IAAMC,eAAeD,QAAQ,QAAR,EAAkBC,YAAvC;AACA,IAAMC,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,eAAeH,QAAQ,cAAR,CAArB;AACAA,QAAQ,WAAR,EAAqBI,QAArB;AACA,IAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,KAA7B,EAAmC;AACjCP,UAAQ,UAAR;AACD;;AAEDQ,OAAOC,OAAP,GAAiB;AACfC,kBAAeA,cADA;AAEfC,YAASX,QAAQ,gBAAR,CAFM;AAGfY,WAAQZ,QAAQ,eAAR,CAHO;AAIfa,WAAQb,QAAQ,eAAR,CAJO;AAKfc,eAAYd,QAAQ,mBAAR,CALG;AAMfe,cAAWf,QAAQ,kBAAR,CANI;AAOfgB,aAAUhB,QAAQ,kBAAR,CAPK;AAQfiB,mBAAgBjB,QAAQ,uBAAR;AARD,CAAjB;;AAWA,SAASU,cAAT,CAAwBQ,OAAxB,EAAiC;AAC/BA,YAAUA,WAAW,EAArB;AACA,MAAMC,WAAW,IAAIC,QAAJ,EAAjB;AACAD,WAASE,OAAT,CAAiBH,OAAjB;AACA,SAAOC,QAAP;AACD;;IAEKC,Q;;;AACJ,sBAAc;AAAA;;AAAA;;AAEZ,UAAKE,OAAL,GAAe,IAAf;AAFY;AAGb;;;;4BAEOJ,O,EAAS;AAAA;;AACf,UAAMK,UAAUpB,aAAaD,KAAKsB,IAAL,CAAUC,SAAV,EAAqB,KAArB,EAA4B,SAA5B,CAAb,CAAhB;AACA,WAAKH,OAAL,GAAevB,GAAG2B,YAAH,CAAgBR,OAAhB,CAAf;AACA,0BAAYK,OAAZ,EACGI,MADH,CACU;AAAA,eAAcJ,QAAQK,UAAR,EAAoBC,MAApB,IAA4BC,SAA1C;AAAA,OADV,EAEGC,OAFH,CAEW;AAAA,eAAcR,QAAQK,UAAR,EAAoBC,MAApB,SAAiCX,OAAjC,CAAd;AAAA,OAFX;AAGA,UAAGA,QAAQc,OAAR,IAAmB,IAAtB,EAA4B,KAAKC,SAAL;AAC5B,WAAKX,OAAL,CAAaY,EAAb,CAAgB,OAAhB,EAAyB;AAAA,eAAS,OAAKC,IAAL,CAAU,OAAV,EAAkBC,KAAlB,CAAT;AAAA,OAAzB;AACA,WAAKd,OAAL,CAAaY,EAAb,CAAgB,WAAhB,EAA6B;AAAA,eAAM,OAAKC,IAAL,CAAU,WAAV,EAAsB,OAAKb,OAAL,CAAae,YAAb,CAA0BC,OAA1B,GAAoCC,IAA1D,CAAN;AAAA,OAA7B;AACA,WAAKJ,IAAL,CAAU,MAAV;AACD;;;EAhBoBlC,Y","file":"../index.js","sourcesContent":["const mc = require('minecraft-protocol');\nconst EventEmitter = require('events').EventEmitter;\nconst path = require('path');\nconst requireIndex = require('requireindex');\nrequire('emit-then').register();\nif (process.env.NODE_ENV === 'dev'){\n  require('longjohn');\n}\n\nmodule.exports = {\n  createMCServer:createMCServer,\n  Behavior:require(\"./lib/behavior\"),\n  Command:require(\"./lib/command\"),\n  version:require(\"./lib/version\"),\n  generations:require(\"./lib/generations\"),\n  experience:require(\"./lib/experience\"),\n  UserError:require(\"./lib/user_error\"),\n  portal_detector:require('./lib/portal_detector')\n};\n\nfunction createMCServer(options) {\n  options = options || {};\n  const mcServer = new MCServer();\n  mcServer.connect(options);\n  return mcServer;\n}\n\nclass MCServer extends EventEmitter {\n  constructor() {\n    super();\n    this._server = null;\n  }\n\n  connect(options) {\n    const plugins = requireIndex(path.join(__dirname, 'lib', 'plugins'));\n    this._server = mc.createServer(options);\n    Object.keys(plugins)\n      .filter(pluginName => plugins[pluginName].server!=undefined)\n      .forEach(pluginName => plugins[pluginName].server(this, options));\n    if(options.logging == true) this.createLog();\n    this._server.on('error', error => this.emit('error',error));\n    this._server.on('listening', () => this.emit('listening',this._server.socketServer.address().port));\n    this.emit('asap');\n  }\n}"]}