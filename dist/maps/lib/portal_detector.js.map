{"version":3,"sources":["lib/portal_detector.js"],"names":["world","startingPoint","type","direction","directionV","line","point","getBlock","name","getBlockType","plus","push","findLineInDirection","scaled","firstSegment","reverse","secondSegment","concat","findLine","firstLineDirection","y","Vec3","all","map","d","length","filter","findPotentialLines","bottom","left","right","top","positiveOrder","horDir","x","findBorder","potentialLines","asyncFilter","border","air","getAir","isAllAir","detectFrame","array","pred","then","reject","catch","asyncEvery","blocks","block","portal","additionalAir","additionalObsidian","World","Chunk","addPortalToWorld","makeWorldWithPortal","require","assert","flatMap","range","module","exports","generateLine","generatePortal","z","e","a","r","pos","offset","i","bottomLeft","width","height","p","setBlockType","bind"],"mappings":"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","file":"../../lib/portal_detector.js","sourcesContent":["const Vec3 = require(\"vec3\").Vec3;\nconst assert = require('assert');\nconst flatMap = require('flatmap');\nconst range = require('range').range;\n\nmodule.exports={detectFrame,findPotentialLines,findBorder,getAir,generateLine,generatePortal,addPortalToWorld,makeWorldWithPortal};\n\nasync function findLineInDirection(world,startingPoint,type,direction,directionV)\n{\n  const line=[];\n  let point=startingPoint;\n  while((await world.getBlock(point)).name==type && (await world.getBlockType(point.plus(directionV)))==0)\n  {\n    line.push(point);\n    point=point.plus(direction);\n  }\n  return line;\n}\n\nasync function findLine(world,startingPoint,type,direction,directionV)\n{\n  const firstSegment=(await findLineInDirection(world,startingPoint.plus(direction.scaled(-1)),type,direction.scaled(-1),directionV)).reverse();\n  const secondSegment=await findLineInDirection(world,startingPoint,type,direction,directionV);\n  return firstSegment.concat(secondSegment);\n}\n\n\nasync function findPotentialLines(world,startingPoint,directionV)\n{\n  const firstLineDirection=directionV.y!=0 ? [new Vec3(1,0,0),new Vec3(0,0,1)] :\n    [new Vec3(0,1,0)];\n  return (await Promise.all(firstLineDirection\n    .map(async d => ({direction:d,line:(await findLine(world,startingPoint,'obsidian',d,directionV))}))))\n    .filter(line => (line.line.length>=3 && line.direction.y!=0) ||\n    (line.line.length>=2 && line.direction.y==0));\n}\n\nfunction positiveOrder(line,direction)\n{\n  if(direction.x==-1 || direction.y==-1 || direction.z==-1)\n    return line.reverse();\n  return line;\n}\n\nasync function findBorder(world,{line,direction},directionV)\n{\n  let bottom=line;\n  if(bottom.length==0)\n    return [];\n  let left=await findLineInDirection(world,bottom[0].plus(direction.scaled(-1).plus(directionV)),'obsidian',directionV,direction);\n  let right=await findLineInDirection(world,bottom[line.length-1].plus(direction).plus(directionV),'obsidian',\n    directionV,direction.scaled(-1));\n  if(left.length==0 || left.length!=right.length)\n    return null;\n  let top=await findLineInDirection(world,left[left.length-1].plus(direction).plus(directionV),'obsidian',\n    direction,directionV.scaled(-1));\n  if(bottom.length!=top.length)\n    return null;\n\n  left=positiveOrder(left,directionV);\n  right=positiveOrder(right,directionV);\n  top=positiveOrder(top,direction);\n\n\n  if(direction.y!=0) {\n    [bottom, left, right, top] = [left, bottom, top, right];\n  }\n\n  [bottom,top]=directionV.y<0 ? [top,bottom] : [bottom,top];\n  const horDir=direction.x!=0 || directionV.x!=0 ? 'x' :'z';\n  [left,right]=direction[horDir]<0 || directionV[horDir]<0 ? [right,left] : [left,right];\n\n  if(bottom.length<2 || top.length<2 || left.length<3 || right.length<3)\n    return null;\n\n  return {bottom,left,right,top};\n}\n\nasync function detectFrame(world,startingPoint,directionV)\n{\n  let potentialLines=await findPotentialLines(world,startingPoint,directionV);\n\n  return asyncFilter((await Promise.all(potentialLines\n    .map(line => findBorder(world,line,directionV))))\n    .filter(border => border!=null)\n    .map(({bottom,left,right,top}) => ({bottom,left,right,top,air:getAir({bottom,left,right,top})})),\n    async ({air}) => await isAllAir(world,air));\n}\n\nasync function asyncEvery(array,pred) {\n  return Promise.all(array.map(x => pred(x).then(y => y ? true : Promise.reject(false))))\n    .then(results => true)\n    .catch(x => false);\n}\n\nfunction asyncFilter(array,pred) {\n  return Promise.all(array.map(e => pred(e).then(a => a ? e : null))).then(r => r.filter(a => a!=null));\n}\n\nasync function isAllAir(world,blocks)\n{\n  return asyncEvery(blocks,async block => (await world.getBlockType(block))==0);\n}\n\nfunction getAir(border)\n{\n  const {bottom,top}=border;\n  return flatMap(bottom,pos => range(1,top[0].y-bottom[0].y).map(i => pos.offset(0,i,0)));\n}\n\n\nconst World = require('prismarine-world')(require(\"./version\"));\nconst Chunk = require('prismarine-chunk')(require(\"./version\"));\n\nfunction generateLine(startingPoint,direction,length) {\n  return range(0,length).map(i => startingPoint.plus(direction.scaled(i)));\n}\n\nfunction generatePortal(bottomLeft,direction,width,height){\n  const directionV=new Vec3(0,1,0);\n  return {\n    bottom:generateLine(bottomLeft.plus(direction),direction,width-2),\n    left:generateLine(bottomLeft.plus(directionV),directionV,height-2),\n    right:generateLine(bottomLeft.plus(direction.scaled(width-1)).plus(directionV),directionV,height-2),\n    top:generateLine(bottomLeft.plus(directionV.scaled(height-1).plus(direction)),direction,width-2),\n    air:flatMap(generateLine(bottomLeft.plus(direction).plus(directionV),direction,width-2),\n      p => generateLine(p,directionV,height-2))\n  }\n}\n\nfunction addPortalToWorld(world,portal,additionalAir,additionalObsidian,setBlockType=null)\n{\n  if(setBlockType==null)\n    setBlockType=world.setBlockType.bind(world);\n  const {bottom,left,right,top,air}=portal;\n\n  const p=flatMap([bottom,left,right,top],border => border.map(pos => setBlockType(pos,49)));\n  p.push(air.map(pos => setBlockType(pos,0)));\n\n  p.push(additionalAir.map(pos => setBlockType(pos,0)));\n  p.push(additionalObsidian.map(pos => setBlockType(pos,49)));\n\n  return Promise.all(p);\n}\n\n\nasync function makeWorldWithPortal(portal,additionalAir,additionalObsidian)\n{\n  const world=new World(() => new Chunk());\n  await addPortalToWorld(world,portal,additionalAir,additionalObsidian);\n\n  return world;\n}"]}