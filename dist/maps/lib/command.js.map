{"version":3,"sources":["lib/command.js"],"names":["Command","params","parent","hash","uniqueHash","parentBase","base","updateHistory","command","parts","split","c","shift","pars","join","undefined","op","res","find","com","parse","usage","match","action","all","list","aliases","length","forEach","unshift","al","path","space","end","first","merged","module","exports"],"mappings":"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","file":"../../lib/command.js","sourcesContent":["class Command {\n  constructor(params, parent, hash) {\n    this.params = params;\n    this.parent = parent;\n    this.hash = parent ? parent.hash : {};\n    this.uniqueHash = parent ? parent.uniqueHash : {};\n    this.parentBase = (this.parent && this.parent.base && this.parent.base + ' ') || '';\n    this.base = this.parentBase + (this.params.base || '');\n\n    if(this.params.base) this.updateHistory();\n  }\n\n  find(command) {\n    const parts=command.split(\" \");\n    const c=parts.shift();\n    const pars=parts.join(\" \");\n    if(this.hash[c])\n      return [this.hash[c], pars];\n    return undefined;\n  }\n\n  async use(command, op=true) {\n    let res = this.find(command);\n\n    if(res) {\n      let [com,pars]=res;\n      if (com.params.op && !op) return 'You do not have permission to use this command';\n      const parse = com.params.parse;\n      if(parse) {\n        if(typeof parse == 'function') {\n          pars = parse(pars);\n          if(pars === false) {\n            return com.params.usage ? 'Usage: ' + com.params.usage : 'Bad syntax';\n          }\n        } else {\n          pars = pars.match(parse);\n        }\n      }\n      \n      res = await com.params.action(pars);\n\n      if(res) return '' + res;\n    } else {\n      return 'Command not found';\n    }\n  }\n\n  updateHistory() {\n    const all = '(.+?)';\n\n    const list = [this.base];\n    if(this.params.aliases && this.params.aliases.length) {\n      this.params.aliases.forEach(al => list.unshift(this.parentBase + al));\n    }\n\n    list.forEach((command) => {\n      const parentBase = this.parent ? (this.parent.path || '') : '';\n      this.path = parentBase + this.space() + (command || all);\n      if(this.path == all && !this.parent) this.path = '';\n\n      if(this.path) this.hash[this.path] = this;\n    });\n    this.uniqueHash[this.base] = this;\n  }\n\n  add(params) {\n    return new Command(params, this);\n  }\n\n  space(end) {\n    const first = !(this.parent && this.parent.parent);\n    return this.params.merged || (!end && first) ? '' : ' ';\n  }\n\n  setOp(op) {\n    this.params.op = op;\n  }\n}\n\nmodule.exports=Command;"]}