{"version":3,"sources":["lib/worldGenerations/pocketmine/index.js"],"names":["array_sum","sum","i","x","length","count","round","y","toFixed","strtolower","toLowerCase","stripos","f_haystack","f_needle","f_offset","haystack","needle","index","indexOf","trim","rand","require","Vec3","Noise","getFastNoise3D","noise","xSize","ySize","zSize","xSamplingRate","ySamplingRate","zSamplingRate","z","noiseArray","Array","fill","map","xx","zz","yy","simplex3","nx","Math","floor","ny","nz","nnx","nny","nnz","dx1","dx2","dy1","dy2","Normal","options","populators","waterHeight","bedrockDepth","generationPopulators","GAUSSIAN_KERNEL","generateKernel","hash","seed","xNoise","zNoise","selector","pickBiome","random","create","noiseBase","generateChunk","chunkX","chunkZ","chunk","Chunk","biomeCache","minSum","maxSum","weightSum","sx","SMOOTH_SIZE","sz","weight","adjacent","biome","smoothHeight","setBlockType","noiseValue","level","getSeed","populator","populate","getChunk","Biome","getBiome","getBiomeId","populateChunk","bellSize","bellHeight","bx","bz","exp","init","module","exports"],"mappings":"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","file":"../../../../lib/worldGenerations/pocketmine/index.js","sourcesContent":[" //PHP API for JS\nconst array_sum = x => {\n\tlet sum=0;\n\tfor(let i = 0; i < x.length; i++){\n\t\tsum+=x[i];\n\t}\n\treturn sum;\n};\nconst count = x => x.length;\nconst round = (x, y) => x.toFixed(y);\nconst strtolower = x => x.toLowerCase();\n\t\t\nconst stripos = ( f_haystack, f_needle, f_offset=0) => {\n\tlet haystack = f_haystack.toLowerCase();\n\tlet needle = f_needle.toLowerCase();\n\tlet index = 0;\n\tif((index = haystack.indexOf(needle, f_offset)) > -1) {\n\t\treturn index;\n\t}\n\treturn false;\n}\nconst trim = x => x.trim();\n\n\nconst rand = require('random-seed');\n\nconst Vec3 = require('vec3').Vec3;\n\nconst Noise = require('noisejs').Noise;\n\n/*\n *\n *  ____            _        _   __  __ _                  __  __ ____\n * |  _ \\ ___   ___| | _____| |_|  \\/  (_)_ __   ___      |  \\/  |  _ \\\n * | |_) / _ \\ / __| |/ / _ \\ __| |\\/| | | '_ \\ / _ \\_____| |\\/| | |_) |\n * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/\n * |_|   \\___/ \\___|_|\\_\\___|\\__|_|  |_|_|_| |_|\\___|     |_|  |_|_|\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version+\n *\n * @author PocketMine Team\n * @link http://www+pocketmine+net/\n *\n *\n*/\n\n\"use strict\";\n\n//extends pocketmine\\level\\generator\\normal;\n\n//import pocketmine\\block\\Block;\n//import pocketmine\\block\\BlockFactory;\n//import pocketmine\\level\\ChunkManager;\n//import pocketmine\\level\\generator\\biome\\Biome;\n//import pocketmine\\level\\generator\\biome\\BiomeSelector;\n//import pocketmine\\level\\generator\\Generator;\n//import pocketmine\\level\\generator\\noise\\Simplex;\n//import pocketmine\\level\\generator\\object\\OreType;\n//import pocketmine\\level\\generator\\populator\\GroundCover;\n//import pocketmine\\level\\generator\\populator\\Ore;\n//import pocketmine\\level\\generator\\populator\\Populator;\n//import pocketmine\\level\\Level;\n//import pocketmine\\math\\Vector3;\n//import pocketmine\\utils\\Random;\n\n//TODO: Оберни константы в конструктор!\n\nfunction getFastNoise3D(noise, xSize, ySize, zSize, xSamplingRate, ySamplingRate, zSamplingRate, x, y, z) {\n\t/*assert(xSamplingRate !== 0, new InvalidArgumentException(\"xSamplingRate cannot be 0\"));\n\tassert(zSamplingRate !== 0, new InvalidArgumentException(\"zSamplingRate cannot be 0\"));\n\tassert(ySamplingRate !== 0, new InvalidArgumentException(\"ySamplingRate cannot be 0\"));\n\tassert(xSize % xSamplingRate === 0, new InvalidArgumentCountException(\"xSize % xSamplingRate must return 0\"));\n\tassert(zSize % zSamplingRate === 0, new InvalidArgumentCountException(\"zSize % zSamplingRate must return 0\"));\n\tassert(ySize % ySamplingRate === 0, new InvalidArgumentCountException(\"ySize % ySamplingRate must return 0\"));*/\n\tconst noiseArray = new Array(xSize + 1).fill(null).map(() => new Array(ySize + 1).fill(null).map(() => new Array(zSize + 1).fill(null)));\n\tfor (let xx = 0; xx <= xSize; xx += xSamplingRate) {\n\t\tfor (let zz = 0; zz <= zSize; zz += zSamplingRate) {\n\t\t\tfor (let yy = 0; yy <= ySize; yy += ySamplingRate) {\n\t\t\t\tnoiseArray[xx][zz][yy] = noise.simplex3(x + xx, y + yy, z + zz);\n\t\t\t}\n\t\t}\n\t}\n\tfor (let xx = 0; xx < xSize; ++xx) {\n\t\tfor (let zz = 0; zz < zSize; ++zz) {\n\t\t\tfor (let yy = 0; yy < ySize; ++yy) {\n\t\t\t\tif (xx % xSamplingRate !== 0 || zz % zSamplingRate !== 0 || yy % ySamplingRate !== 0){\n\t\t\t\t\tlet nx = Math.floor((xx / xSamplingRate) * xSamplingRate);\n\t\t\t\t\tlet ny = Math.floor((yy / ySamplingRate) * ySamplingRate);\n\t\t\t\t\tlet nz = Math.floor((zz / zSamplingRate) * zSamplingRate);\n\t\t\t\t\tlet nnx = nx + xSamplingRate;\n\t\t\t\t\tlet nny = ny + ySamplingRate;\n\t\t\t\t\tlet nnz = nz + zSamplingRate;\n\t\t\t\t\tlet dx1 = ((nnx - xx) / (nnx - nx));\n\t\t\t\t\tlet dx2 = ((xx - nx) / (nnx - nx));\n\t\t\t\t\tlet dy1 = ((nny - yy) / (nny - ny));\n\t\t\t\t\tlet dy2 = ((yy - ny) / (nny - ny));\n\t\t\t\t\tnoiseArray[xx][zz][yy] = ((nnz - zz) / (nnz - nz)) * (\n\t\t\t\t\t\tdy1 * (\n\t\t\t\t\t\t\tdx1 * noiseArray[nx][nz][ny] + dx2 * noiseArray[nnx][nz][ny]\n\t\t\t\t\t\t) + dy2 * (\n\t\t\t\t\t\t\tdx1 * noiseArray[nx][nz][nny] + dx2 * noiseArray[nnx][nz][nny]\n\t\t\t\t\t\t)\n\t\t\t\t\t) + ((zz - nz) / (nnz - nz)) * (\n\t\t\t\t\t\tdy1 * (\n\t\t\t\t\t\t\tdx1 * noiseArray[nx][nnz][ny] + dx2 * noiseArray[nnx][nnz][ny]\n\t\t\t\t\t\t) + dy2 * (\n\t\t\t\t\t\t\tdx1 * noiseArray[nx][nnz][nny] + dx2 * noiseArray[nnx][nnz][nny]\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn noiseArray;\n}\nclass Normal/* extends Generator*/{\n\n\t/** @var Populator[] */\n\tpopulators = [];\n\t/** @var */\n\twaterHeight = 62;\n\t/** @var */\n\tbedrockDepth = 5;\n\n\t/** @var Populator[] */\n\tgenerationPopulators = [];\n\t/** @var Simplex */\n\tnoiseBase;\n\n\t/** @var BiomeSelector */\n\tselector;\n\n\tstatic GAUSSIAN_KERNEL = null;\n\tstatic SMOOTH_SIZE = 2;\n\n\tconstructor(options = {}){\n\t\tif(Normal.GAUSSIAN_KERNEL === null){\n\t\t\tNormal.generateKernel();\n\t\t}\n\t}\n\n\tstatic generateKernel(){\n\t\tthis.GAUSSIAN_KERNEL = [];\n\n\t\tconst bellSize = 1 / this.SMOOTH_SIZE;\n\t\tconst bellHeight = 2 * this.SMOOTH_SIZE;\n\n\t\tfor(let sx = -this.SMOOTH_SIZE; sx <= this.SMOOTH_SIZE; ++sx){\n\t\t\tthis.GAUSSIAN_KERNEL[sx + this.SMOOTH_SIZE] = [];\n\n\t\t\tfor(let sz = -this.SMOOTH_SIZE; sz <= this.SMOOTH_SIZE; ++sz){\n\t\t\t\tlet bx = bellSize * sx;\n\t\t\t\tlet bz = bellSize * sz;\n\t\t\t\tthis.GAUSSIAN_KERNEL[sx + this.SMOOTH_SIZE][sz + this.SMOOTH_SIZE] = bellHeight * Math.exp(-(bx * bx + bz * bz) / 2);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetName(){\n\t\treturn \"normal\";\n\t}\n\n\tgetSettings(){\n\t\treturn [];\n\t}\n\n\tpickBiome(x, z){\n\t\thash = x * 2345803 ^ z * 9236449 ^ this.seed;\n\t\thash *= hash + 223;\n\t\txNoise = hash >> 20 & 3;\n\t\tzNoise = hash >> 22 & 3;\n\t\tif(xNoise == 3){\n\t\t\txNoise = 1;\n\t\t}\n\t\tif(zNoise == 3){\n\t\t\tzNoise = 1;\n\t\t}\n\n\t\treturn this.selector.pickBiome(x + xNoise - 1, z + zNoise - 1);\n\t}\n\n\tstatic init(options={}) {\n\t\treturn new Normal().init(options);\n\t}\n\n\tinit({seed=0}={}){\n\t\tthis.seed = seed;\n\t\tthis.random = rand.create();\n\t\tthis.noiseBase = new Noise(seed);\n\t\t/*this.selector = new BiomeSelector(this.random, function(temperature, rainfall){\n\t\t\tif(rainfall < 0+25){\n\t\t\t\tif(temperature < 0+7){\n\t\t\t\t\treturn Biome.OCEAN;\n\t\t\t\t} else if (temperature < 0+85){\n\t\t\t\t\treturn Biome.RIVER;\n\t\t\t\t}else{\n\t\t\t\t\treturn Biome.SWAMP;\n\t\t\t\t}\n\t\t\t} else if (rainfall < 0+60){\n\t\t\t\tif(temperature < 0+25){\n\t\t\t\t\treturn Biome.ICE_PLAINS;\n\t\t\t\t} else if (temperature < 0+75){\n\t\t\t\t\treturn Biome.PLAINS;\n\t\t\t\t}else{\n\t\t\t\t\treturn Biome.DESERT;\n\t\t\t\t}\n\t\t\t} else if (rainfall < 0+80){\n\t\t\t\tif(temperature < 0+25){\n\t\t\t\t\treturn Biome.TAIGA;\n\t\t\t\t} else if (temperature < 0+75){\n\t\t\t\t\treturn Biome.FOREST;\n\t\t\t\t}else{\n\t\t\t\t\treturn Biome.BIRCH_FOREST;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t//FIXME: This will always ca//import River to be used since the rainfall is always greater than 0+8 if we\n\t\t\t\t//reached this branch+ However I don't think that substituting temperature for rainfall is correct given\n\t\t\t\t//that mountain biomes are supposed to be pretty cold+\n\t\t\t\tif(rainfall < 0+25){\n\t\t\t\t\treturn Biome.MOUNTAINS;\n\t\t\t\t} else if (rainfall < 0+70){\n\t\t\t\t\treturn Biome.SMALL_MOUNTAINS;\n\t\t\t\t}else{\n\t\t\t\t\treturn Biome.RIVER;\n\t\t\t\t}\n\t\t\t}\n\t\t}, Biome.getBiome(Biome.OCEAN));\n\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.OCEAN));\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.PLAINS));\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.DESERT));\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.MOUNTAINS));\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.FOREST));\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.TAIGA));\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.SWAMP));\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.RIVER));\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.ICE_PLAINS));\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.SMALL_MOUNTAINS));\n\t\tthis.selector.addBiome(Biome.getBiome(Biome.BIRCH_FOREST));\n\n\t\tthis.selector.recalculate();\n\n\t\tcover = new GroundCover();\n\t\tthis.generationPopulators.push(cover);\n\n\t\tores = new Ore();\n\t\tores.setOreTypes([\n\t\t\tnew OreType(BlockFactory.get(Block.COAL_ORE), 20, 16, 0, 128),\n\t\t\tnew OreType(BlockFactory.get(Block.IRON_ORE), 20, 8, 0, 64),\n\t\t\tnew OreType(BlockFactory.get(Block.REDSTONE_ORE), 8, 7, 0, 16),\n\t\t\tnew OreType(BlockFactory.get(Block.LAPIS_ORE), 1, 6, 0, 32),\n\t\t\tnew OreType(BlockFactory.get(Block.GOLD_ORE), 2, 8, 0, 32),\n\t\t\tnew OreType(BlockFactory.get(Block.DIAMOND_ORE), 1, 7, 0, 16),\n\t\t\tnew OreType(BlockFactory.get(Block.DIRT), 20, 32, 0, 128),\n\t\t\tnew OreType(BlockFactory.get(Block.GRAVEL), 10, 16, 0, 128)\n\t\t]);\n\t\tthis.populators.push(ores);*/\n\t\treturn this.generateChunk;\n\t}\n\n\tgenerateChunk(chunkX, chunkZ){\n\t\tthis.random.seed(0xdeadbeef ^ (chunkX << 8) ^ chunkZ ^ this.seed);\n\n\t\tconst noise = getFastNoise3D(this.noiseBase, 16, 128, 16, 4, 8, 4, chunkX * 16, 0, chunkZ * 16);\n\t\t//const noise = Array0.5;\n\n\t\t//const chunk = this.level.getChunk(chunkX, chunkZ);\n\n\t\tconst chunk = new Chunk();\n\n\t\tconst biomeCache = [];\n\n\t\tfor(x = 0; x < 16; ++x){\n\t\t\tfor(z = 0; z < 16; ++z){\n\t\t\t\tlet minSum = 0;\n\t\t\t\tlet maxSum = 0;\n\t\t\t\tlet weightSum = 0;\n\n\t\t\t\t//biome = this.pickBiome(chunkX * 16 + x, chunkZ * 16 + z);\n\t\t\t\t//chunk.setBiome(new Vec3(x, 0, z), biome.getId());\n\n\t\t\t\tfor(sx = -Normal.SMOOTH_SIZE; sx <= Normal.SMOOTH_SIZE; ++sx){\n\t\t\t\t\tfor(sz = -Normal.SMOOTH_SIZE; sz <= Normal.SMOOTH_SIZE; ++sz){\n\n\t\t\t\t\t\tweight = Normal.GAUSSIAN_KERNEL[sx + Normal.SMOOTH_SIZE][sz + Normal.SMOOTH_SIZE];\n\n\t\t\t\t\t\tif(sx === 0 && sz === 0){\n\t\t\t\t\t\t\tadjacent = biome;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t/*index = Level.chunkHash(chunkX * 16 + x + sx, chunkZ * 16 + z + sz);\n\t\t\t\t\t\t\tif(biomeCache[index]){\n\t\t\t\t\t\t\t\tadjacent = biomeCache[index];\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tbiomeCache[index] = adjacent = this.pickBiome(chunkX * 16 + x + sx, chunkZ * 16 + z + sz);\n\t\t\t\t\t\t\t}*/\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tminSum += (/*adjacent.getMinElevation()*/ 64 - 1) * weight;\n\t\t\t\t\t\tmaxSum += /*adjacent.getMaxElevation()*/ 128 * weight;\n\n\t\t\t\t\t\tweightSum += weight;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tminSum /= weightSum;\n\t\t\t\tmaxSum /= weightSum;\n\n\t\t\t\tsmoothHeight = (maxSum - minSum) / 2;\n\n\t\t\t\tfor(y = 0; y < 128; ++y){\n\t\t\t\t\tif(y === 0){\n\t\t\t\t\t\tchunk.setBlockType(new Vec3(x, y, z), 7); // Bedrock\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tnoiseValue = noise[x][z][y] - 1 / smoothHeight * (y - smoothHeight - minSum);\n\n\t\t\t\t\tif(noiseValue > 0){\n\t\t\t\t\t\tchunk.setBlockType(new Vec3(x, y, z), 1);  // Bedrock\n\t\t\t\t\t} else if (y <= this.waterHeight){\n\t\t\t\t\t\tchunk.setBlockType(new Vec3(x, y, z), 9); // Water\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*for(const populator of this.generationPopulators){\n\t\t\tpopulator.populate(this.level, chunkX, chunkZ, this.random);\n\t\t}*/\n\t}\n\n\tpopulateChunk(chunkX, chunkZ){\n\t\tthis.random.seed(0xdeadbeef ^ (chunkX << 8) ^ chunkZ ^ this.level.getSeed());\n\t\tfor(const populator of this.populators){\n\t\t\tpopulator.populate(this.level, chunkX, chunkZ, this.random);\n\t\t}\n\n\t\tchunk = this.level.getChunk(chunkX, chunkZ);\n\t\tbiome = Biome.getBiome(chunk.getBiomeId(7, 7));\n\t\tbiome.populateChunk(this.level, chunkX, chunkZ, this.random);\n\t}\n\n\tgetSpawn(){\n\t\treturn new Vec3(127+5, 128, 127+5);\n\t}\n\n}\n\nmodule.exports = Normal.init;"]}