{"version":3,"sources":["lib/worldGenerations/diamond-square/index.js"],"names":["Chunk","require","Vec3","rand","Ore","DiamondSquare","size","roughness","seed","opCountN","data","x","y","v","parseInt","val","Math","max","min","base","squareStep","diamondStep","xm7","xm13","xm1301081","ym8461","ym105467","ym105943","i","blockSize","randFromPair","displace","generation","worldHeight","waterline","space","biomeSpace","orePopulator","blockId","blockData","clusterCount","clusterSize","minHeight","maxHeight","generateSimpleChunk","chunkX","chunkZ","chunk","seedRand","create","worldX","worldZ","treeRand","treeLevel","floor","value","treeData","treeBiome","round","treeTopPartRand","z","level","biome","dirtheight","bedrockheight","block","pos","setBlockType","setBlockData","surfaceblock","belowblock","setSkyLight","setBiome","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,QAAQC,QAAQ,kBAAR,EAA4B,KAA5B,CAAd;AACA,IAAMC,OAAOD,QAAQ,MAAR,EAAgBC,IAA7B;AACA,IAAMC,OAAOF,QAAQ,aAAR,CAAb;AACA,IAAMG,MAAMH,QAAQ,kBAAR,CAAZ;;IAEMI,a;AACJ,yBAAYC,IAAZ,EAAkBC,SAAlB,EAA6BC,IAA7B,EAAmC;AAAA;;AACjC;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,CAAhB;;AAEA;AACA,SAAKC,IAAL,GAAY,EAAZ;AACD;;AAED;;;;;0BACMC,C,EAAGC,C,EAAGC,C,EAAG;AACbF,UAAIG,SAASH,CAAT,CAAJ;AACAC,UAAIE,SAASF,CAAT,CAAJ;AACA,UAAI,OAAOC,CAAP,IAAa,WAAjB,EACE,KAAKE,GAAL,CAASJ,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EADF,KAGE,OAAO,KAAKE,GAAL,CAASJ,CAAT,EAAYC,CAAZ,CAAP;AACH;;;;;AAED;wBACID,C,EAAGC,C,EAAGC,C,EAAG;AACX,UAAI,OAAOA,CAAP,IAAa,WAAjB,EACE,KAAKH,IAAL,CAAUC,IAAI,GAAJ,GAAUC,CAApB,IAAyBI,KAAKC,GAAL,CAAS,GAAT,EAAcD,KAAKE,GAAL,CAAS,GAAT,EAAcL,CAAd,CAAd,CAAzB,CADF,KAEK;AACH,YAAIF,KAAK,CAAL,IAAUA,KAAK,KAAKL,IAApB,IAA4BM,KAAK,CAAjC,IAAsCA,KAAK,KAAKN,IAApD,EAA0D,OAAO,GAAP;;AAE1D,YAAI,KAAKI,IAAL,CAAUC,IAAI,GAAJ,GAAUC,CAApB,KAA0B,IAA9B,EAAoC;AAClC,eAAKH,QAAL;AACA,cAAIU,OAAO,CAAX;AACA,iBAAQ,CAACR,IAAIQ,IAAL,KAAc,CAAf,IAAsB,CAACP,IAAIO,IAAL,KAAc,CAA3C;AACEA,qBAAS,CAAT;AADF,WAGA,IAAK,CAACR,IAAIQ,IAAL,KAAc,CAAf,IAAsB,CAACP,IAAIO,IAAL,KAAc,CAAxC,EACE,KAAKC,UAAL,CAAgBT,CAAhB,EAAmBC,CAAnB,EAAsBO,IAAtB,EADF,KAGE,KAAKE,WAAL,CAAiBV,CAAjB,EAAoBC,CAApB,EAAuBO,IAAvB;AACH;AACD,eAAO,KAAKT,IAAL,CAAUC,IAAI,GAAJ,GAAUC,CAApB,CAAP;AACD;AACF;;;iCAEYD,C,EAAGC,C,EAAG;AACjB,UAAIU,YAAJ;AAAA,UAAQC,aAAR;AAAA,UAAaC,kBAAb;AAAA,UAAuBC,eAAvB;AAAA,UAA8BC,iBAA9B;AAAA,UAAuCC,iBAAvC;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AAC3BN,cAAMX,IAAI,CAAV;AACAY,eAAOZ,IAAI,EAAX;AACAa,oBAAYb,IAAI,OAAhB;AACAc,iBAASb,IAAI,IAAb;AACAc,mBAAWd,IAAI,MAAf;AACAe,mBAAWf,IAAI,MAAf;AACA;AACAA,YAAID,IAAI,KAAKH,IAAb;AACAG,aAAMW,MAAMC,IAAN,GAAaC,SAAb,GAAyBC,MAAzB,GAAkCC,QAAlC,GAA6CC,QAAnD;AACD;;AAED,aAAO,CAACL,MAAMC,IAAN,GAAaC,SAAb,GAAyBC,MAAzB,GAAkCC,QAAlC,GAA6CC,QAA9C,IAA0D,SAAjE;AACD;;;6BAEQd,C,EAAGgB,S,EAAWlB,C,EAAGC,C,EAAG;AAC3B,aAAQC,IAAI,CAAC,KAAKiB,YAAL,CAAkBnB,CAAlB,EAAqBC,CAArB,EAAwB,KAAKJ,IAA7B,IAAqC,GAAtC,IAA6CqB,SAA7C,GAAyD,CAAzD,GAA6D,KAAKvB,IAAlE,GAAyE,KAAKC,SAA1F;AACD;;;+BAEUI,C,EAAGC,C,EAAGiB,S,EAAW;AAC1B,UAAI,KAAKnB,IAAL,CAAUC,IAAI,GAAJ,GAAUC,CAApB,KAA0B,IAA9B,EAAoC;AAClC,aAAKG,GAAL,CAASJ,CAAT,EAAYC,CAAZ,EACE,KAAKmB,QAAL,CAAc,CAAC,KAAKhB,GAAL,CAASJ,IAAIkB,SAAb,EAAwBjB,IAAIiB,SAA5B,IACb,KAAKd,GAAL,CAASJ,IAAIkB,SAAb,EAAwBjB,IAAIiB,SAA5B,CADa,GAEb,KAAKd,GAAL,CAASJ,IAAIkB,SAAb,EAAwBjB,IAAIiB,SAA5B,CAFa,GAGb,KAAKd,GAAL,CAASJ,IAAIkB,SAAb,EAAwBjB,IAAIiB,SAA5B,CAHY,IAG8B,CAH5C,EAG+CA,SAH/C,EAG0DlB,CAH1D,EAG6DC,CAH7D,CADF;AAKD;AACF;;;gCAEWD,C,EAAGC,C,EAAGiB,S,EAAW;AAC3B,UAAI,KAAKnB,IAAL,CAAUC,IAAI,GAAJ,GAAUC,CAApB,KAA0B,IAA9B,EAAoC;AAClC,aAAKG,GAAL,CAASJ,CAAT,EAAYC,CAAZ,EACE,KAAKmB,QAAL,CAAc,CAAC,KAAKhB,GAAL,CAASJ,IAAIkB,SAAb,EAAwBjB,CAAxB,IACb,KAAKG,GAAL,CAASJ,IAAIkB,SAAb,EAAwBjB,CAAxB,CADa,GAEb,KAAKG,GAAL,CAASJ,CAAT,EAAYC,IAAIiB,SAAhB,CAFa,GAGb,KAAKd,GAAL,CAASJ,CAAT,EAAYC,IAAIiB,SAAhB,CAHY,IAGkB,CAHhC,EAGmCA,SAHnC,EAG8ClB,CAH9C,EAGiDC,CAHjD,CADF;AAKD;AACF;;;;;AAGH,SAASoB,UAAT,GAA2D;AAAA,iFAAJ,EAAI;AAAA,MAAtCxB,IAAsC,QAAtCA,IAAsC;AAAA,8BAAjCyB,WAAiC;AAAA,MAAjCA,WAAiC,oCAArB,EAAqB;AAAA,4BAAlBC,SAAkB;AAAA,MAAlBA,SAAkB,kCAAR,EAAQ;;AACzD;AACA,MAAM5B,OAAO,QAAb;AACA,MAAM6B,QAAQ,IAAI9B,aAAJ,CAAkBC,IAAlB,EAAwBA,OAAO,GAA/B,EAAoCE,IAApC,CAAd;AACA,MAAM4B,aAAa,IAAI/B,aAAJ,CAAkBC,IAAlB,EAAwBA,OAAO,GAA/B,EAAoCE,OAAO,CAA3C,CAAnB;AACA,MAAM6B,eAAejC,IAAI,CACvB;AACEkC,aAAS,EADX;AAEEC,eAAW,CAFb;AAGEC,kBAAc,EAHhB;AAIEC,iBAAa,EAJf;AAKEC,eAAW,CALb;AAMEC,eAAW;AANb,GADuB,EASvB;AACEL,aAAS,EADX;AAEEC,eAAW,CAFb;AAGEC,kBAAc,EAHhB;AAIEC,iBAAa,CAJf;AAKEC,eAAW,CALb;AAMEC,eAAW;AANb,GATuB,EAiBvB;AACEL,aAAS,EADX;AAEEC,eAAW,CAFb;AAGEC,kBAAc,CAHhB;AAIEC,iBAAa,CAJf;AAKEC,eAAW,CALb;AAMEC,eAAW;AANb,GAjBuB,EAyBvB;AACEL,aAAS,EADX;AAEEC,eAAW,CAFb;AAGEC,kBAAc,CAHhB;AAIEC,iBAAa,CAJf;AAKEC,eAAW,CALb;AAMEC,eAAW;AANb,GAzBuB,EAiCvB;AACEL,aAAS,EADX;AAEEC,eAAW,CAFb;AAGEC,kBAAc,CAHhB;AAIEC,iBAAa,CAJf;AAKEC,eAAW,CALb;AAMEC,eAAW;AANb,GAjCuB,EAyCvB;AACEL,aAAS,EADX;AAEEC,eAAW,CAFb;AAGEC,kBAAc,CAHhB;AAIEC,iBAAa,CAJf;AAKEC,eAAW,CALb;AAMEC,eAAW;AANb,GAzCuB,EAiDvB;AACEL,aAAS,CADX;AAEEC,eAAW,CAFb;AAGEC,kBAAc,EAHhB;AAIEC,iBAAa,EAJf;AAKEC,eAAW,CALb;AAMEC,eAAW;AANb,GAjDuB,EAyDvB;AACEL,aAAS,EADX;AAEEC,eAAW,CAFb;AAGEC,kBAAc,EAHhB;AAIEC,iBAAa,EAJf;AAKEC,eAAW,CALb;AAMEC,eAAW;AANb,GAzDuB,CAAJ,CAArB;;AAmEA,WAASC,mBAAT,CAA6BC,MAA7B,EAAqCC,MAArC,EAA6C;AAC3C,QAAMC,QAAQ,IAAI/C,KAAJ,EAAd;AACA,QAAMgD,WAAW7C,KAAK8C,MAAL,CAAYzC,OAAK,GAAL,GAASqC,MAAT,GAAgB,GAAhB,GAAoBC,MAAhC,CAAjB;;AAEA,QAAMI,SAASL,SAAS,EAAT,GAAcvC,OAAO,CAApC;AACA,QAAM6C,SAASL,SAAS,EAAT,GAAcxC,OAAO,CAApC;AACA,QAAM8C,WAAWJ,SAAS,CAAT,CAAjB;AACA,QAAMK,YAAYrC,KAAKsC,KAAL,CAAWnB,MAAMoB,KAAN,CAAYL,SAAS,CAArB,EAAwBC,SAAS,CAAjC,IAAsClB,WAAjD,CAAlB;AACA,QAAIuB,WAAW,CAAf;AACA,YAAQR,SAAS,CAAT,CAAR;AACE,WAAK,CAAL;AAAQQ,mBAAW,CAAX,CAAc;AADxB;;AAIA,QAAMC,YAAYzC,KAAK0C,KAAL,CAAWtB,WAAWmB,KAAX,CAAiBL,SAAS,CAA1B,EAA6BC,SAAS,CAAtC,CAAX,CAAlB;AACA,QAAMQ,kBAAkBX,SAAS,CAAT,CAAxB;;AAEA,SAAK,IAAIrC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AAC3B,WAAK,IAAIiD,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AAC3B,YAAMC,QAAQ7C,KAAKsC,KAAL,CAAWnB,MAAMoB,KAAN,CAAYL,SAASvC,CAArB,EAAwBwC,SAASS,CAAjC,IAAsC3B,WAAjD,CAAd;AACA;AACA,YAAM6B,QAAQ9C,KAAK0C,KAAL,CAAWtB,WAAWmB,KAAX,CAAiBL,SAASvC,CAA1B,EAA6BwC,SAASS,CAAtC,CAAX,CAAd;AACA,YAAMG,aAAaF,QAAQ,CAAR,GAAYb,SAAS,CAAT,CAA/B;AACA,YAAMgB,gBAAgB,IAAIhB,SAAS,CAAT,CAA1B;AACA,YAAII,YAAY,CAAZ,IAAiBC,aAAanB,SAA9B,IAA2CkB,YAAY,CAAvD,IAA4DK,aAAa,CAA7E,EAAgF,KAAK,IAAI7C,IAAIiD,QAAQ,CAArB,EAAwBjD,KAAKiD,QAAQ,CAArC,EAAwCjD,GAAxC,EAA6C;AAC3H,cAAIqD,cAAJ;AACA,cAAMC,MAAM,IAAIhE,IAAJ,CAASS,CAAT,EAAYC,CAAZ,EAAegD,CAAf,CAAZ;AACA,cAAGhD,KAAKyC,YAAY,CAAjB,IAAsB1C,KAAK,CAA3B,IAAgCiD,KAAK,CAAxC,EAA2C;AACzCK,oBAAQ,EAAR;AACD,WAFD,MAEO,IAAItD,KAAK,CAAL,IAAUiD,KAAK,CAAnB,EAAsB;AAC3BK,oBAAQ,EAAR;AACD,WAFM,MAEA,IAAIN,mBAAmB,CAAnB,IAAwB/C,KAAKyC,YAAY,CAAzC,KAAgD1C,KAAK,CAAL,IAAUiD,KAAK,CAAhB,IAAuBjD,KAAK,CAAL,IAAUiD,KAAK,CAAtC,IAA6CjD,KAAK,CAAL,IAAUiD,KAAK,CAA5D,IAAmEjD,KAAK,CAAL,IAAUiD,KAAK,CAAjI,CAAJ,EAA0I;AAC/IK,oBAAQ,EAAR;AACD,WAFM,MAEA,IAAGrD,KAAKyC,YAAY,CAAjB,IAAsB1C,KAAK,CAA3B,IAAgCA,KAAK,CAArC,IAA0CiD,KAAK,CAA/C,IAAoDA,KAAK,CAA5D,EAA+D;AACpEK,oBAAQ,EAAR;AACD,WAFM,MAEA,IAAIrD,KAAKyC,YAAY,CAAjB,IAAsBzC,KAAKyC,YAAY,CAAvC,IAA4C1C,KAAK,CAAjD,IAAsDA,KAAK,EAA3D,IAAiEiD,KAAK,CAAtE,IAA2EA,KAAK,EAAhF,IAAsF,EAAE,CAAChD,KAAKyC,YAAY,CAAjB,GAAqBL,SAAS,CAAT,KAAe,CAApC,GAAwC,IAAzC,MAAmDrC,KAAK,CAAL,IAAUA,KAAK,EAAlE,MAA0EiD,KAAK,CAAL,IAAUA,KAAK,EAAzF,CAAF,CAA1F,EAA2L;AAChMK,oBAAQ,EAAR;AACD;AACD,cAAIA,KAAJ,EAAWlB,MAAMoB,YAAN,CAAmBD,GAAnB,EAAwBD,KAAxB;AACXlB,gBAAMqB,YAAN,CAAmBF,GAAnB,EAAwBV,QAAxB;AACD;AACD,aAAK,IAAI5C,KAAI,CAAb,EAAgBA,KAAI,GAApB,EAAyBA,IAAzB,EAA8B;AAC5B,cAAIqD,eAAJ;AACA,cAAIvD,aAAJ;;AAEA,cAAM2D,eAAeR,QAAQ3B,SAAR,IAAqB4B,SAAS,CAA9B,GAAmC,EAAnC,GAAwC,CAA7D,CAJ4B,CAIoC;AAChE,cAAMQ,aAAaT,QAAQ3B,SAAR,IAAqB4B,SAAS,CAA9B,GAAkC,EAAlC,GAAuC,CAA1D,CAL4B,CAKiC;;AAE7D,cAAIlD,KAAIoD,aAAR,EAAuBC,SAAQ,CAAR,CAAvB,CAAkC;AAAlC,eACK,IAAIrD,KAAIiD,KAAJ,IAAajD,MAAKmD,UAAtB,EAAkCE,SAAQK,UAAR,CAAlC,CAAsD;AAAtD,iBACA,IAAI1D,KAAIiD,KAAR,EAAgB;AACnBI,yBAAQ,CAAR,CADmB,CACR;AACX;;;;;;;;;AASD,eAXI,MAYA,IAAIrD,MAAKiD,KAAT,EAAgB;AACnBI,yBAAQI,YAAR,CADmB,CACG;AACtB,oBAAI1D,KAAK,CAAL,IAAUiD,KAAK,CAAf,IAAoBR,YAAY,CAApC,EAAuC;AACrCa,2BAAQK,UAAR;AACD;AACF,eALI,MAMA,IAAI1D,MAAKsB,SAAT,EAAoB+B,SAAQ,CAAR,CAApB,CAA+B;AACpC;;;;AADK,mBAKA,IAAIH,SAAS,CAAT,IAAclD,MAAKiD,QAAQ,CAA3B,IAAgCA,SAAS3B,SAAzC,IAAsDc,SAAS,EAAT,KAAgB,CAAtE,IAA2E,EAAErC,KAAK,CAAL,IAAUiD,KAAK,CAAf,IAAoBR,YAAY,CAAlC,CAA/E,EAAqH;AAAE;AAC1Ha,2BAAQ,EAAR;AACAvD,yBAAO,CAAP;AACD;;AAED,cAAMwD,OAAM,IAAIhE,IAAJ,CAASS,CAAT,EAAYC,EAAZ,EAAegD,CAAf,CAAZ;AACA,cAAIK,MAAJ,EAAWlB,MAAMoB,YAAN,CAAmBD,IAAnB,EAAwBD,MAAxB;AACX,cAAIvD,IAAJ,EAAUqC,MAAMqB,YAAN,CAAmBF,IAAnB,EAAwBxD,IAAxB;AACVqC,gBAAMwB,WAAN,CAAkBL,IAAlB,EAAuB,EAAvB;AACA,kBAAOJ,KAAP;AACE,iBAAK,CAAL;AACEf,oBAAMyB,QAAN,CAAeN,IAAf,EAAoB,CAApB;AACF;AACA,iBAAK,CAAL;AACEnB,oBAAMyB,QAAN,CAAeN,IAAf,EAAoB,CAApB;AACF;AANF;AAQD;AACF;AACF;AACD7B,iBAAaU,KAAb,EAAoBF,MAApB,EAA4BC,MAA5B,EAAoCE,QAApC;;AAEA,WAAOD,KAAP;AACD;AACD,SAAOH,mBAAP;AACD;;AAED6B,OAAOC,OAAP,GAAe1C,UAAf","file":"../../../../lib/worldGenerations/diamond-square/index.js","sourcesContent":["\"use strict\";\n\nconst Chunk = require('prismarine-chunk')(\"1.8\");\nconst Vec3 = require('vec3').Vec3;\nconst rand = require('random-seed');\nconst Ore = require('./populators/Ore');\n\nclass DiamondSquare {\n  constructor(size, roughness, seed) {\n    // public fields\n    this.size = size;\n    this.roughness = roughness;\n    this.seed = seed;\n    this.opCountN = 0;\n\n    // private field\n    this.data = [];\n  }\n\n  // public methods\n  value(x, y, v) {\n    x = parseInt(x);\n    y = parseInt(y);\n    if (typeof(v) != 'undefined')\n      this.val(x, y, v);\n    else\n      return this.val(x, y);\n  };\n\n  // private methods\n  val(x, y, v) {\n    if (typeof(v) != 'undefined')\n      this.data[x + '_' + y] = Math.max(0.0, Math.min(1.0, v));\n    else {\n      if (x <= 0 || x >= this.size || y <= 0 || y >= this.size) return 0.0;\n\n      if (this.data[x + '_' + y] == null) {\n        this.opCountN++;\n        let base = 1;\n        while (((x & base) == 0) && ((y & base) == 0))\n          base <<= 1;\n\n        if (((x & base) != 0) && ((y & base) != 0))\n          this.squareStep(x, y, base);\n        else\n          this.diamondStep(x, y, base);\n      }\n      return this.data[x + '_' + y];\n    }\n  }\n\n  randFromPair(x, y) {\n    let xm7,xm13,xm1301081,ym8461,ym105467,ym105943;\n    for (let i = 0; i < 80; i++) {\n      xm7 = x % 7;\n      xm13 = x % 13;\n      xm1301081 = x % 1301081;\n      ym8461 = y % 8461;\n      ym105467 = y % 105467;\n      ym105943 = y % 105943;\n      //y = (i < 40 ? seed : x);\n      y = x + this.seed;\n      x += (xm7 + xm13 + xm1301081 + ym8461 + ym105467 + ym105943);\n    }\n\n    return (xm7 + xm13 + xm1301081 + ym8461 + ym105467 + ym105943) / 1520972.0;\n  }\n\n  displace(v, blockSize, x, y) {\n    return (v + (this.randFromPair(x, y, this.seed) - 0.5) * blockSize * 2 / this.size * this.roughness);\n  }\n\n  squareStep(x, y, blockSize) {\n    if (this.data[x + '_' + y] == null) {\n      this.val(x, y,\n        this.displace((this.val(x - blockSize, y - blockSize) +\n          this.val(x + blockSize, y - blockSize) +\n          this.val(x - blockSize, y + blockSize) +\n          this.val(x + blockSize, y + blockSize)) / 4, blockSize, x, y));\n    }\n  }\n\n  diamondStep(x, y, blockSize) {\n    if (this.data[x + '_' + y] == null) {\n      this.val(x, y,\n        this.displace((this.val(x - blockSize, y) +\n          this.val(x + blockSize, y) +\n          this.val(x, y - blockSize) +\n          this.val(x, y + blockSize)) / 4, blockSize, x, y));\n    }\n  }\n}\n\nfunction generation({seed,worldHeight=96,waterline=64}={}) {\n  // Selected empirically\n  const size = 10000000;\n  const space = new DiamondSquare(size, size / 500, seed);\n  const biomeSpace = new DiamondSquare(size, size / 100, seed + 1);\n  const orePopulator = Ore([\n    {\n      blockId: 16,\n      blockData: 0,\n      clusterCount: 20,\n      clusterSize: 16,\n      minHeight: 0,\n      maxHeight: 128\n    },\n    {\n      blockId: 15,\n      blockData: 0,\n      clusterCount: 20,\n      clusterSize: 8,\n      minHeight: 0,\n      maxHeight: 64\n    },\n    {\n      blockId: 73,\n      blockData: 0,\n      clusterCount: 8,\n      clusterSize: 7,\n      minHeight: 0,\n      maxHeight: 16\n    },\n    {\n      blockId: 21,\n      blockData: 0,\n      clusterCount: 1,\n      clusterSize: 6,\n      minHeight: 0,\n      maxHeight: 32\n    },\n    {\n      blockId: 14,\n      blockData: 0,\n      clusterCount: 2,\n      clusterSize: 8,\n      minHeight: 0,\n      maxHeight: 32\n    },\n    {\n      blockId: 56,\n      blockData: 0,\n      clusterCount: 1,\n      clusterSize: 7,\n      minHeight: 0,\n      maxHeight: 16\n    },\n    {\n      blockId: 3,\n      blockData: 0,\n      clusterCount: 20,\n      clusterSize: 32,\n      minHeight: 0,\n      maxHeight: 128\n    },\n    {\n      blockId: 13,\n      blockData: 0,\n      clusterCount: 10,\n      clusterSize: 16,\n      minHeight: 0,\n      maxHeight: 128\n    }\n  ]);\n\n  function generateSimpleChunk(chunkX, chunkZ) {\n    const chunk = new Chunk();\n    const seedRand = rand.create(seed+':'+chunkX+':'+chunkZ);\n\n    const worldX = chunkX * 16 + size / 2;\n    const worldZ = chunkZ * 16 + size / 2;\n    const treeRand = seedRand(3);\n    const treeLevel = Math.floor(space.value(worldX + 8, worldZ + 8) * worldHeight);\n    let treeData = 0;\n    switch (seedRand(2)) {\n      case 1: treeData = 2; break;\n    }\n\n    const treeBiome = Math.round(biomeSpace.value(worldX + 8, worldZ + 8));\n    const treeTopPartRand = seedRand(2);\n\n    for (let x = 0; x < 16; x++) {\n      for (let z = 0; z < 16; z++) {\n        const level = Math.floor(space.value(worldX + x, worldZ + z) * worldHeight);\n        //level += 4;\n        const biome = Math.round(biomeSpace.value(worldX + x, worldZ + z));\n        const dirtheight = level - 4 + seedRand(3);\n        const bedrockheight = 1 + seedRand(4);\n        if (treeRand == 0 && treeLevel >= waterline && treeRand == 0 && treeBiome != 1) for (let y = level + 1; y <= level + 6; y++) {\n          let block;\n          const pos = new Vec3(x, y, z);\n          if(y == treeLevel + 6 && x == 8 && z == 8) {\n            block = 18;\n          } else if (x == 8 && z == 8) {\n            block = 17;\n          } else if (treeTopPartRand == 0 && y == treeLevel + 6 && ((x == 7 && z == 8) || (x == 9 && z == 8) || (x == 8 && z == 7) || (x == 8 && z == 9))) {\n            block = 18;\n          } else if(y == treeLevel + 5 && x >= 7 && x <= 9 && z >= 7 && z <= 9) {\n            block = 18;\n          } else if (y <= treeLevel + 4 && y >= treeLevel + 3 && x >= 6 && x <= 10 && z >= 6 && z <= 10 && !((y == treeLevel + 3 ? seedRand(2) == 0 : true) && (x == 6 || x == 10) && (z == 6 || z == 10))) {\n            block = 18;\n          }\n          if (block) chunk.setBlockType(pos, block);\n          chunk.setBlockData(pos, treeData);\n        }\n        for (let y = 0; y < 256; y++) {\n          let block;\n          let data;\n\n          const surfaceblock = level < waterline || biome == 1  ? 12 : 2; // Sand below water, grass\n          const belowblock = level < waterline || biome == 1 ? 12 : 3; // 3-5 blocks below surface\n\n          if (y < bedrockheight) block = 7; // Solid bedrock at bottom\n          else if (y < level && y >= dirtheight) block = belowblock; // Dirt/sand below surface\n          else if (y < level)  {\n            block = 1; // Set stone inbetween\n            /*const rand = seedRand(10);\n            switch(rand) {\n              case 0: block = 16; break;\n              case 1: block = 15; break;\n              case 2: block = 21; break;\n              case 3: block = 14; break;\n              case 4: block = 56; break;\n              case 5: block = 73; break;\n            }*/\n          }\n          else if (y == level) {\n            block = surfaceblock; // Set surface sand/grass\n            if (x == 8 && z == 8 && treeRand == 0) {\n              block = belowblock;\n            }\n          }\n          else if (y <= waterline) block = 9; // Set the water\n          /*else if (y >= level+1 && level >= waterline && y <= level + 5 && treeRand == 0) {\n            block = 17;\n            data = 0;\n          }*/\n          else if (biome != 1 && y == level + 1 && level >= waterline && seedRand(10) == 0 && !(x == 8 && z == 8 && treeRand == 0)) { // 1/10 chance of grass\n            block = 31;\n            data = 1;\n          }\n\n          const pos = new Vec3(x, y, z);\n          if (block) chunk.setBlockType(pos, block);\n          if (data) chunk.setBlockData(pos, data);\n          chunk.setSkyLight(pos, 15);\n          switch(biome) {\n            case 0:\n              chunk.setBiome(pos, 1);\n            break;\n            case 1:\n              chunk.setBiome(pos, 2);\n            break;\n          }\n        }\n      }\n    }\n    orePopulator(chunk, chunkX, chunkZ, seedRand);\n\n    return chunk;\n  }\n  return generateSimpleChunk;\n}\n\nmodule.exports=generation;\n"]}