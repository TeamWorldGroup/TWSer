{"version":3,"sources":["lib/worldGenerations/diamond-square/index.js"],"names":["Chunk","require","Vec3","rand","DiamondSquare","size","roughness","seed","opCountN","data","x","y","v","parseInt","val","Math","max","min","base","squareStep","diamondStep","xm7","xm13","xm1301081","ym8461","ym105467","ym105943","i","blockSize","randFromPair","displace","generation","worldHeight","waterline","space","biomeSpace","generateSimpleChunk","chunkX","chunkZ","chunk","seedRand","create","worldX","worldZ","treeRand","treeLevel","floor","value","treeData","treeBiome","round","z","level","biome","dirtheight","bedrockheight","block","pos","setBlockType","setBlockData","surfaceblock","belowblock","setSkyLight","setBiome","module","exports"],"mappings":"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","file":"../../../../lib/worldGenerations/diamond-square/index.js","sourcesContent":["\"use strict\";\n\nconst Chunk = require('prismarine-chunk')(\"1.8\");\nconst Vec3 = require('vec3').Vec3;\nconst rand = require('random-seed');\n\nclass DiamondSquare {\n  constructor(size, roughness, seed) {\n    // public fields\n    this.size = size;\n    this.roughness = roughness;\n    this.seed = seed;\n    this.opCountN = 0;\n\n    // private field\n    this.data = [];\n  }\n\n  // public methods\n  value(x, y, v) {\n    x = parseInt(x);\n    y = parseInt(y);\n    if (typeof(v) != 'undefined')\n      this.val(x, y, v);\n    else\n      return this.val(x, y);\n  };\n\n  // private methods\n  val(x, y, v) {\n    if (typeof(v) != 'undefined')\n      this.data[x + '_' + y] = Math.max(0.0, Math.min(1.0, v));\n    else {\n      if (x <= 0 || x >= this.size || y <= 0 || y >= this.size) return 0.0;\n\n      if (this.data[x + '_' + y] == null) {\n        this.opCountN++;\n        let base = 1;\n        while (((x & base) == 0) && ((y & base) == 0))\n          base <<= 1;\n\n        if (((x & base) != 0) && ((y & base) != 0))\n          this.squareStep(x, y, base);\n        else\n          this.diamondStep(x, y, base);\n      }\n      return this.data[x + '_' + y];\n    }\n  }\n\n  randFromPair(x, y) {\n    let xm7,xm13,xm1301081,ym8461,ym105467,ym105943;\n    for (let i = 0; i < 80; i++) {\n      xm7 = x % 7;\n      xm13 = x % 13;\n      xm1301081 = x % 1301081;\n      ym8461 = y % 8461;\n      ym105467 = y % 105467;\n      ym105943 = y % 105943;\n      //y = (i < 40 ? seed : x);\n      y = x + this.seed;\n      x += (xm7 + xm13 + xm1301081 + ym8461 + ym105467 + ym105943);\n    }\n\n    return (xm7 + xm13 + xm1301081 + ym8461 + ym105467 + ym105943) / 1520972.0;\n  }\n\n  displace(v, blockSize, x, y) {\n    return (v + (this.randFromPair(x, y, this.seed) - 0.5) * blockSize * 2 / this.size * this.roughness);\n  }\n\n  squareStep(x, y, blockSize) {\n    if (this.data[x + '_' + y] == null) {\n      this.val(x, y,\n        this.displace((this.val(x - blockSize, y - blockSize) +\n          this.val(x + blockSize, y - blockSize) +\n          this.val(x - blockSize, y + blockSize) +\n          this.val(x + blockSize, y + blockSize)) / 4, blockSize, x, y));\n    }\n  }\n\n  diamondStep(x, y, blockSize) {\n    if (this.data[x + '_' + y] == null) {\n      this.val(x, y,\n        this.displace((this.val(x - blockSize, y) +\n          this.val(x + blockSize, y) +\n          this.val(x, y - blockSize) +\n          this.val(x, y + blockSize)) / 4, blockSize, x, y));\n    }\n  }\n}\n\nfunction generation({seed,worldHeight=96,waterline=64}={}) {\n  // Selected empirically\n  const size = 10000000;\n  const space = new DiamondSquare(size, size / 500, seed);\n  const biomeSpace = new DiamondSquare(size, size / 100, seed + 1);\n\n  function generateSimpleChunk(chunkX, chunkZ) {\n    const chunk = new Chunk();\n    const seedRand = rand.create(seed+':'+chunkX+':'+chunkZ);\n\n    const worldX = chunkX * 16 + size / 2;\n    const worldZ = chunkZ * 16 + size / 2;\n    const treeRand = seedRand(3);\n    const treeLevel = Math.floor(space.value(worldX + 8, worldZ + 8) * worldHeight);\n    let treeData = 0;\n    /*switch (seedRand(2)) {\n      case 1: treeData = 2; break;\n    }*/\n\n    const treeBiome = Math.round(biomeSpace.value(worldX + 8, worldZ + 8));\n\n    for (let x = 0; x < 16; x++) {\n      for (let z = 0; z < 16; z++) {\n        const level = Math.floor(space.value(worldX + x, worldZ + z) * worldHeight);\n        //level += 4;\n        const biome = Math.round(biomeSpace.value(worldX + x, worldZ + z));\n        const dirtheight = level - 4 + seedRand(3);\n        const bedrockheight = 1 + seedRand(4);\n        if (treeRand == 0 && treeLevel >= waterline && treeRand == 0 && treeBiome != 1) for (let y = level + 1; y <= level + 6; y++) {\n          let block;\n          const pos = new Vec3(x, y, z);\n          if(y == treeLevel + 6 && x == 8 && z == 8) {\n            block = 18;\n          } else if (x == 8 && z == 8) {\n            block = 17;\n          } else if (y == treeLevel + 5 && ((x == 7 && z == 8) || (x == 9 && z == 8) || (x == 8 && z == 7) || (x == 8 && z == 9))) {\n            block = 18;\n          } else if (y <= treeLevel + 4 && y >= treeLevel + 3 && x >= 6 && x <= 10 && z >= 6 && z <= 10 && !((x == 6 || x == 10) && (z == 6 || z == 10))) {\n            block = 18;\n          }\n          if (block) chunk.setBlockType(pos, block);\n          chunk.setBlockData(pos, treeData);\n        }\n        for (let y = 0; y < 256; y++) {\n          let block;\n          let data;\n\n          const surfaceblock = level < waterline || biome == 1  ? 12 : 2; // Sand below water, grass\n          const belowblock = level < waterline || biome == 1 ? 12 : 3; // 3-5 blocks below surface\n\n          if (y < bedrockheight) block = 7; // Solid bedrock at bottom\n          else if (y < level && y >= dirtheight) block = belowblock; // Dirt/sand below surface\n          else if (y < level)  {\n            block = 1; // Set stone inbetween\n            const rand = seedRand(10);\n            switch(rand) {\n              case 0: block = 16; break;\n              case 1: block = 15; break;\n              case 2: block = 21; break;\n              case 3: block = 14; break;\n              case 4: block = 56; break;\n              case 5: block = 73; break;\n            }\n          }\n          else if (y == level) {\n            block = surfaceblock; // Set surface sand/grass\n            if (x == 8 && z == 8 && treeRand == 0) {\n              block = belowblock;\n            }\n          }\n          else if (y <= waterline) block = 9; // Set the water\n          /*else if (y >= level+1 && level >= waterline && y <= level + 5 && treeRand == 0) {\n            block = 17;\n            data = 0;\n          }*/\n          else if (biome != 1 && y == level + 1 && level >= waterline && seedRand(10) == 0 && !(x == 8 && z == 8 && treeRand == 0)) { // 1/10 chance of grass\n            block = 31;\n            data = 1;\n          }\n\n          const pos = new Vec3(x, y, z);\n          if (block) chunk.setBlockType(pos, block);\n          if (data) chunk.setBlockData(pos, data);\n          chunk.setSkyLight(pos, 15);\n          switch(biome) {\n            case 0:\n              chunk.setBiome(pos, 1);\n            break;\n            case 1:\n              chunk.setBiome(pos, 2);\n            break;\n          }\n        }\n      }\n    }\n\n    return chunk;\n  }\n  return generateSimpleChunk;\n}\n\nmodule.exports=generation;\n"]}