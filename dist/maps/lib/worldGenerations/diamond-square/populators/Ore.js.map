{"version":3,"sources":["lib/worldGenerations/diamond-square/populators/Ore.js"],"names":["Vec3","require","module","exports","types","chunk","chunkX","chunkZ","random","type","i","clusterCount","x","intBetween","y","minHeight","maxHeight","z","clusterSize","getBlockType","setBlockType","blockId","setBlockData","blockData","range"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,OAAOC,QAAQ,MAAR,EAAgBD,IAA7B;;AAEAE,OAAOC,OAAP,GAAiB,WAAS,QAASC,KAAlB,EAAyB;AACtC,WAAO,WAAS,YAAaC,KAAtB,EAA6BC,MAA7B,EAAqCC,MAArC,EAA6CC,MAA7C,EAAqD;AAAA;AAAA;AAAA;;AAAA;AACxD,4DAAkBJ,KAAlB,4GAAyB;AAAA,oBAAfK,IAAe;;AACrB,qBAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAID,KAAKE,YAAxB,EAAsCD,GAAtC,EAA2C;AACvC,wBAAIE,IAAIJ,OAAOK,UAAP,CAAkBP,UAAU,CAA5B,EAA+B,CAACA,UAAU,CAAX,IAAgB,EAA/C,CAAR;AACA,wBAAIQ,IAAIN,OAAOK,UAAP,CAAkBJ,KAAKM,SAAvB,EAAkCN,KAAKO,SAAvC,CAAR;AACA,wBAAIC,IAAIT,OAAOK,UAAP,CAAkBN,UAAU,CAA5B,EAA+B,CAACA,UAAU,CAAX,IAAgB,EAA/C,CAAR;AACA,yBAAI,IAAIG,KAAI,CAAZ,EAAeA,KAAID,KAAKS,WAAxB,EAAqCR,IAArC,EAA0C;AACtC,4BAAIL,MAAMc,YAAN,CAAmB,IAAInB,IAAJ,CAASY,CAAT,EAAYE,CAAZ,EAAeG,CAAf,CAAnB,MAA0C,CAA9C,EAAiD;AAAE;AAC/CZ,kCAAMe,YAAN,CAAmB,IAAIpB,IAAJ,CAASY,CAAT,EAAYE,CAAZ,EAAeG,CAAf,CAAnB,EAAsCR,KAAKY,OAA3C;AACAhB,kCAAMiB,YAAN,CAAmB,IAAItB,IAAJ,CAASY,CAAT,EAAYE,CAAZ,EAAeG,CAAf,CAAnB,EAAsCR,KAAKc,SAA3C;AACH;AACDX,6BAAKJ,OAAOgB,KAAP,CAAa,CAAb,IAAkB,CAAvB;AACAV,6BAAKN,OAAOgB,KAAP,CAAa,CAAb,IAAkB,CAAvB;AACAP,6BAAKT,OAAOgB,KAAP,CAAa,CAAb,IAAkB,CAAvB;AACA,4BAAIZ,IAAI,CAAJ,IAASA,KAAK,EAAd,IAAoBK,IAAI,CAAxB,IAA6BA,KAAK,EAAlC,IAAwCH,IAAI,CAA5C,IAAiDA,KAAK,GAA1D,EAA+D;AAC3D;AACH;AACJ;AACJ;AACJ;AAnBuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoB3D,KApBD;AAqBH,CAtBD","file":"../../../../../lib/worldGenerations/diamond-square/populators/Ore.js","sourcesContent":["\"use strict\";\n\nconst Vec3 = require('vec3').Vec3;\n\nmodule.exports = function /*init*/(types) {\n    return function /*populate*/(chunk, chunkX, chunkZ, random) {\n        for(const type of types) {\n            for(let i = 0; i < type.clusterCount; i++) {\n                let x = random.intBetween(chunkX << 4, (chunkX << 4) + 15);\n                let y = random.intBetween(type.minHeight, type.maxHeight);\n                let z = random.intBetween(chunkZ << 4, (chunkZ << 4) + 15);\n                for(let i = 0; i < type.clusterSize; i++) {\n                    if (chunk.getBlockType(new Vec3(x, y, z)) === 1) { // Stone\n                        chunk.setBlockType(new Vec3(x, y, z), type.blockId);\n                        chunk.setBlockData(new Vec3(x, y, z), type.blockData);\n                    }\n                    x += random.range(3) - 1;\n                    y += random.range(3) - 1;\n                    z += random.range(3) - 1;\n                    if (x < 0 || x >= 16 || z < 0 || z >= 16 || y < 0 || y >= 256) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}"]}