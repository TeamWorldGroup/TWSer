{"version":3,"sources":["lib/plugins/commands.js"],"names":["UserError","require","module","exports","player","serv","commands","add","base","info","usage","parse","str","params","split","page","parseInt","length","pop","search","join","action","hash","uniqueHash","PAGE_LENGTH","found","filter","h","indexOf","cmd","chat","totalPages","Math","ceil","sort","baseCmd","i","min","num","isNaN","emit","version","op","sel","arr","selectorString","position","scaled","world","map","a","id","handleCommand","use","res","color","red","userError","message","setTimeout","entity","server","shuffleArray","array","currentIndex","temporaryValue","randomIndex","floor","random","notudf","selector","type","opt","count","entities","pos","sample","players","p","health","k","checkOption","val","compare","not","v","slice","scores","max","forEach","o","score","replace","push","radius","s","distanceTo","minRadius","gameMode","level","minLevel","yaw","minYaw","pitch","minPitch","team","name","username","fail","m","b","reverse","allowUser","clone","getPlayer","match","typeConversion","r","e","optPair","err","key","optConversion","rm","c","l","lm","rx","rxm","ry","rym","convertInt","data","minScores","posFromString","parseFloat"],"mappings":"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","file":"../../../lib/plugins/commands.js","sourcesContent":["const UserError = require('flying-squid').UserError;\n\nmodule.exports.player=function(player, serv) {\n\n  player.commands.add({\n    base: 'help',\n    info: 'to show all commands',\n    usage: '/help [command]',\n    parse(str) {\n      const params = str.split(' ');\n      const page = parseInt(params[params.length-1]);\n      if (page) {\n        params.pop();\n      }\n      const search = params.join(' ');\n      return { search: search, page: (page && page - 1) || 0 };\n    },\n    action({search, page}) {\n      if (page < 0) return 'Page # must be >= 1';\n      const hash = player.commands.uniqueHash;\n\n      const PAGE_LENGTH = 7;\n\n      let found = Object.keys(hash).filter(h => (h + ' ').indexOf((search && search + ' ') || '') == 0);\n\n      if (found.length == 0) { // None found\n        return 'Could not find any matches';\n      } else if (found.length == 1) { // Single command found, giev info on command\n        const cmd = hash[found[0]];\n        const usage = (cmd.params && cmd.params.usage) || cmd.base;\n        const info = (cmd.params && cmd.params.info) || 'No info';\n        player.chat(usage + ': ' + info);\n      } else { // Multiple commands found, give list with pages\n        const totalPages = Math.ceil((found.length-1) / PAGE_LENGTH);\n        if (page >= totalPages) return 'There are only' + totalPages + ' help pages';\n        found = found.sort();\n        if (found.indexOf('search') != -1) {\n          const baseCmd = hash[search];\n          player.chat(baseCmd.base + ' -' + ((baseCmd.params && baseCmd.params.info && ' ' + baseCmd.params.info) || '=-=-=-=-=-=-=-=-'));\n        } else {\n          player.chat('Help -=-=-=-=-=-=-=-=-');\n        }\n        for (let i = PAGE_LENGTH*page; i < Math.min(PAGE_LENGTH*(page + 1), found.length); i++) {\n          if (found[i] === search) continue;\n          const cmd = hash[found[i]];\n          const usage = (cmd.params && cmd.params.usage) || cmd.base;\n          const info = (cmd.params && cmd.params.info) || 'No info';\n          player.chat(usage + ': ' + info);\n        }\n        player.chat('--=[Page ' + (page + 1) + ' of ' + totalPages + ']=--')\n      }\n    }\n  });\n\n  player.commands.add({\n    base: 'ping',\n    info: 'to pong!',\n    usage: '/ping [number]',\n    action(params) {\n      const num = params[0] * 1 + 1;\n\n      let str = 'pong';\n      if(!isNaN(num)) str += ' [' + num + ']';\n\n      player.chat(str + '!');\n    }\n  });\n\n  player.commands.add({\n    base: 'modpe',\n    info: 'for modpe commands',\n    usage: '/modpe <params>',\n    parse(str) { return str ? str : false },\n    action(str) {\n      player.emit(\"modpe\", str);\n    }\n  });\n\n  player.commands.add({\n    base: 'version',\n    info: 'to get version of the server',\n    usage: '/version',\n    action() {\n      return 'This server is running flying-squid version '+require(\"../../../package\").version;\n    }\n  });\n\n  player.commands.add({\n    base: 'bug',\n    info: 'to bug report',\n    usage: '/bug',\n    action() {\n      return 'Report bugs / issues here: https://github.com/PrismarineJS/flying-squid/issues';\n    }\n  });\n\n  player.commands.add({\n    base: 'selector',\n    info: 'Get array from selector',\n    usage: '/selector <selector>',\n    op: true,\n    parse(str) {\n      return str || false;\n    },\n    action(sel) {\n      const arr = serv.selectorString(sel, player.position.scaled(1/32), player.world);\n      player.chat(JSON.stringify(arr.map(a => a.id)));\n    }\n  });\n\n\n  player.handleCommand = async (str) => {\n    try {\n      const res = await player.commands.use(str, player.op);\n      if (res) player.chat(serv.color.red + res);\n    }\n    catch(err) {\n      if (err.userError) player.chat(serv.color.red + 'Error: ' + err.message);\n      else setTimeout(() => {throw err;}, 0);\n    }\n  }\n};\n\nmodule.exports.entity = function(entity, serv) {\n  entity.selectorString = (str) => serv.selectorString(str, entity.position.scaled(1/32), entity.world);\n};\n\nmodule.exports.server = function(serv) {\n\n  function shuffleArray(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex ;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  const notudf = i => typeof i != 'undefined';\n\n  serv.selector = (type, opt) => {\n    if (['all', 'random', 'near', 'entity'].indexOf(type) == -1)\n      throw new UserError('serv.selector(): type must be either [all, random, near, or entity]');\n\n    const count = typeof opt.count != 'undefined' ?\n                  count :\n                  (type == 'all' || type == 'entity' ?serv.entities.length : 1);\n    const pos = opt.pos;\n    let sample;\n    if (type == 'all') sample = serv.players;\n    else if (type == 'random' || type == 'near') sample = serv.players.filter(p => p.health != 0);\n    else if (type == 'entity') sample = Object.keys(serv.entities).map(k => serv.entities[k]);\n\n    const checkOption = (val, compare) => {\n      if (!val) return true;\n      const not = val[0] == '!';\n      let v = val;\n      if (not) v = v.slice(1, v.length);\n      if (not && compare == v) return false;\n      if (!not && compare != v) return false;\n      return true;\n    };\n\n    const scores = {\n      max: [],\n      min: []\n    };\n\n    Object.keys(opt).forEach(o => {\n      if (o.indexOf('score_') != 0) return;\n      const score = o.replace('score_', '');\n      if (score.indexOf('_min') == score.length - 1) {\n        scores.min.push({\n          score: score.replace('_min' ,''),\n          val: opt[o]\n        });\n      } else {\n        scores.max.push({\n          score: score,\n          val: opt[o]\n        });\n      }\n    });\n\n    sample = sample.filter(s => {\n      if ((notudf(opt.radius) && s.position.scaled(1/32).distanceTo(pos) > opt.radius) ||\n          (notudf(opt.minRadius) && s.position.scaled(1/32).distanceTo(pos) < opt.minRadius) ||\n          (notudf(opt.gameMode) && s.gameMode != opt.gameMode) ||\n          (notudf(opt.level) && s.level > opt.level) ||\n          (notudf(opt.minLevel) && s.level < opt.minLevel) ||\n          (notudf(opt.yaw) && s.yaw > opt.yaw) ||\n          (notudf(opt.minYaw) && s.yaw < opt.minYaw) ||\n          (notudf(opt.pitch) && s.pitch > opt.pitch) ||\n          (notudf(opt.minPitch) && s.pitch < opt.minPitch))\n            return false;\n\n      if (!checkOption(opt.team, s.team)) return false;\n      if (!checkOption(opt.name, s.username)) return false;\n      if (!checkOption(opt.type, s.name)) return false;\n\n      let fail = false;\n      scores.max.forEach(m => {\n        if (fail) return;\n        if (!notudf(s.scores[m.score])) fail = true;\n        else if (s.scores[m] > m.val) fail = true;\n      });\n      if (fail) return false;\n      scores.min.forEach(m => {\n        if (fail) return;\n        if (!notudf(s.scores[m.score])) fail = true;\n        else if (s.scores[m] < m.val) fail = true;\n      });\n      return !fail;\n\n\n    });\n\n    if (type == 'near') sample.sort((a,b) => a.position.distanceTo(opt.pos) > b.position.distanceTo(opt.pos));\n    else if (type == 'random') sample = shuffleArray(sample);\n    else sample = sample.reverse(); // Front = newest\n\n    if (count > 0) return sample.slice(0, count);\n    else return sample.slice(count); // Negative, returns from end\n  };\n\n  serv.selectorString = (str, pos, world, allowUser=true) => {\n    pos = pos.clone();\n    const player = serv.getPlayer(str);\n    if (!player && str[0] != '@') return [];\n    else if (player) return allowUser ? [player] : [];\n    const match = str.match(/^@([arpe])(?:\\[([^\\]]+)\\])?$/);\n    if (match == null) throw new UserError('Invalid selector format');\n    const typeConversion = {\n      a: 'all',\n      r: 'random',\n      p: 'near',\n      e: 'entity'\n    };\n    const type = typeConversion[match[1]];\n    const opt = match[2] ? match[2].split(',') : [];\n    const optPair = [];\n    let err;\n    opt.forEach(o => {\n      const match = o.match(/^([^=]+)=([^=]+)$/);\n      if (match == null) err = new UserError('Invalid selector option format: \"' + o + '\"');\n      else optPair.push({key: match[1], val: match[2]});\n    });\n    if (err) throw err;\n\n    const optConversion = {\n      type: 'type',\n      r: 'radius',\n      rm: 'minRadius',\n      m: 'gameMode',\n      c: 'count',\n      l: 'level',\n      lm: 'minLevel',\n      team: 'team',\n      name: 'name',\n      rx: 'yaw',\n      rxm: 'minYaw',\n      ry: 'pitch',\n      rym: 'minPitch'\n    };\n    const convertInt = ['r', 'rm', 'm', 'c', 'l', 'lm', 'rx', 'rxm', 'ry', 'rym'];\n\n    const data = {\n      pos: pos,\n      world: world,\n      scores: [],\n      minScores: []\n    };\n\n    optPair.forEach(({key,val}) => {\n      if (['x', 'y', 'z'].indexOf(key) != -1) pos[key] = val;\n      else if (!optConversion[key]) {\n        data[key] = val;\n      }\n      else {\n        if (convertInt.indexOf(key) != -1) val = parseInt(val);\n        data[optConversion[key]] = val;\n      }\n    });\n\n    return serv.selector(type, data);\n  };\n\n  serv.posFromString = (str, pos) => {\n    if (str.indexOf(\"~\")==-1) return parseFloat(str);\n    if (str.match(/~-?\\d+/)) return parseFloat(str.slice(1)) + pos;\n    else if (str == '~') return pos;\n    else throw new UserError('Invalid position');\n  };\n};"]}