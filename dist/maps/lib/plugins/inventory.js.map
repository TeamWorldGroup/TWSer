{"version":3,"sources":["lib/plugins/inventory.js"],"names":["version","require","windows","Item","module","exports","player","serv","heldItemSlot","heldItem","inventory","InventoryWindow","_client","on","slotId","setEquipment","slots","_writeOthersNearby","entityId","id","slot","item","toNotch","clickInfo","mode","mouseButton","spawnObject","world","position","velocity","Vec3","itemId","type","itemDamage","metadata","pickupTime","deathTime","acceptClick","err","emit","blockId","updateSlot","undefined","newItem","fromNotch","oldItem","equipments","write","windowId","collect","collectEntity","itemKey","length","console","log","damage","count","collectedEntityId","collectorEntityId","playSoundAtSelf","destroy","emptySlot","firstEmptyInventorySlot"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,cAAR,EAAwBD,OAAxC;AACA,IAAME,UAAUD,QAAQ,oBAAR,EAA8BD,OAA9B,EAAuCE,OAAvD;AACA,IAAMC,OAAOF,QAAQ,iBAAR,EAA2BD,OAA3B,CAAb;;AAEAI,OAAOC,OAAP,CAAeC,MAAf,GAAwB,UAASA,MAAT,EAAgBC,IAAhB,EACxB;AACED,SAAOE,YAAP,GAAsB,CAAtB;AACAF,SAAOG,QAAP,GAAkB,IAAIN,IAAJ,CAAS,GAAT,EAAc,CAAd,CAAlB;AACAG,SAAOI,SAAP,GAAmB,IAAIR,QAAQS,eAAZ,CAA4B,CAA5B,EAA+B,WAA/B,EAA4C,EAA5C,CAAnB;;AAEAL,SAAOM,OAAP,CAAeC,EAAf,CAAkB,gBAAlB,EAAoC,YAAmB;AAAA,mFAAP,EAAO;AAAA,QAAjBC,MAAiB,QAAjBA,MAAiB;;AACrDR,WAAOE,YAAP,GAAsBM,MAAtB;AACAR,WAAOS,YAAP,CAAoB,CAApB,EAAsBT,OAAOI,SAAP,CAAiBM,KAAjB,CAAuB,KAAKV,OAAOE,YAAnC,CAAtB;;AAEAF,WAAOW,kBAAP,CAA0B,kBAA1B,EAA6C;AACzCC,gBAAUZ,OAAOa,EADwB;AAEzCC,YAAM,CAFmC;AAGzCC,YAAMlB,KAAKmB,OAAL,CAAahB,OAAOG,QAApB;AAHmC,KAA7C;AAKD,GATD;;AAWAH,SAAOM,OAAP,CAAeC,EAAf,CAAkB,cAAlB,EAAkC,UAASU,SAAT,EAAmB;AACnD;AACA;AACA;AACA,YAAOA,UAAUC,IAAjB;AACE,WAAK,CAAL;AACE,YAAGD,UAAUE,WAAV,IAAyB,CAA5B,EAA8B;AAC5B;AACA;AACD,SAHD,MAGK;AACH;AACA;AACD;AACH;;AAEA,WAAK,CAAL;AACE,YAAGF,UAAUE,WAAV,IAAyB,CAA5B,EAA8B;AAC5B;AACA;AACA;AACD,SAJD,MAIK;AACH;AACA;AACA;AACD;AACH;;AAEA,WAAK,CAAL;AACE;AACA;AACA;AACA;AACF;;AAEA,WAAK,CAAL;AACE;AACA;AACA;AACF;;AAEA,WAAK,CAAL;AACE,YAAGF,UAAUH,IAAV,IAAkB,CAAC,GAAtB,EAA0B;AACxB;AACD,SAFD,MAEK;AACH;AACA,cAAGG,UAAUE,WAAV,IAAyB,CAA5B,EAA8B;AAC5B;AACA;;AAEA,gBAAMhB,WAAWH,OAAOI,SAAP,CAAiBM,KAAjB,CAAuB,KAAGV,OAAOE,YAAjC,CAAjB;AACAD,iBAAKmB,WAAL,CAAiB,CAAjB,EAAoBpB,OAAOqB,KAA3B,EAAkCrB,OAAOsB,QAAzC,EAAmD;AACjDC,wBAAU,IAAIC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CADuC;AAEjDC,sBAAQtB,SAASuB,IAFgC;AAGjDC,0BAAYxB,SAASyB,QAH4B;AAIjDC,0BAAY,GAJqC;AAKjDC,yBAAW,KAAK,CAAL,GAAS;AAL6B,aAAnD;AAOD,WAZD,MAYK;AACH;AACA;AACA;AACD;AACF;AACH;;AAEA;AACA,WAAK,CAAL;AACE,YAAGb,UAAUH,IAAV,IAAkB,CAAC,GAAtB,EAA0B;AACxB,kBAAOG,UAAUE,WAAjB;AACE,iBAAK,CAAL;AACE;AACA;AACF;;AAEA,iBAAK,CAAL;AACE;AACA;AACF;;AAEA,iBAAK,CAAL;AACE;AACA;AACF;;AAEA,iBAAK,CAAL;AACE;AACA;AACF;AAnBF;AAqBD,SAtBD,MAsBK;AACH,kBAAOF,UAAUE,WAAjB;AACE,iBAAK,CAAL;AACE;AACA;AACF;;AAEA,iBAAK,CAAL;AACE;AACA;AACF;AATF;AAWD;AACH;;AAEA;AACA,WAAK,CAAL;AACE;AACA;AACF;AAxGF;;AA2GA;AACA;AACA;AACA,QAAI;AACFnB,aAAOI,SAAP,CAAiB2B,WAAjB,CAA6Bd,SAA7B;AACD,KAFD,CAGA,OAAMe,GAAN,EAAW;AACT/B,WAAKgC,IAAL,CAAU,OAAV,EAAkBD,GAAlB;AACD;AACF,GAxHD;;AA0HAhC,SAAOM,OAAP,CAAeC,EAAf,CAAkB,mBAAlB,EAAuC,YAAqB;AAAA,oFAAP,EAAO;AAAA,QAAnBO,IAAmB,SAAnBA,IAAmB;AAAA,QAAdC,IAAc,SAAdA,IAAc;;AAC1D,QAAGA,KAAKmB,OAAL,IAAgB,CAAC,CAApB,EAAsB;AACpBlC,aAAOI,SAAP,CAAiB+B,UAAjB,CAA4BrB,IAA5B,EAAkCsB,SAAlC;AACA;AACD;;AAED,QAAMC,UAAUxC,KAAKyC,SAAL,CAAevB,IAAf,CAAhB;AACAf,WAAOI,SAAP,CAAiB+B,UAAjB,CAA4BrB,IAA5B,EAAkCuB,OAAlC;AACD,GARD;;AAUArC,SAAOI,SAAP,CAAiBG,EAAjB,CAAoB,cAApB,EAAoC,UAASO,IAAT,EAAcyB,OAAd,EAAsBF,OAAtB,EAA8B;;AAEhE,QAAMG,aAAW;AACf,SAAE,CADa;AAEf,SAAE,CAFa;AAGf,SAAE,CAHa;AAIf,SAAE;AAJa,KAAjB;AAMAA,eAAWxC,OAAOE,YAAlB,IAAgC,CAAhC;AACA,QAAGsC,WAAW1B,IAAX,MAAmBsB,SAAtB,EAAiC;AAC/BpC,aAAOS,YAAP,CAAoB+B,WAAW1B,IAAX,CAApB,EAAqCuB,OAArC;AACArC,aAAOW,kBAAP,CAA0B,kBAA1B,EAA8C;AAC5CC,kBAAUZ,OAAOa,EAD2B;AAE5CC,cAAM0B,WAAW1B,IAAX,CAFsC;AAG5CC,cAAMlB,KAAKmB,OAAL,CAAaqB,OAAb;AAHsC,OAA9C;AAKD;;AAEDrC,WAAOM,OAAP,CAAemC,KAAf,CAAqB,UAArB,EAAiC;AAC/BC,gBAAU,CADqB;AAE/B5B,YAAMA,IAFyB;AAG/BC,YAAMlB,KAAKmB,OAAL,CAAaqB,OAAb;AAHyB,KAAjC;AAKD,GAvBD;;AA2BArC,SAAO2C,OAAP,GAAiB,UAACC,aAAD,EAAmB;;AAElC;AACA,SAAI,IAAIC,UAAQ,CAAhB,EAAkBA,UAAQ7C,OAAOI,SAAP,CAAiBM,KAAjB,CAAuBoC,MAAjD,EAAwDD,SAAxD,EAAmE;AACjE,UAAM9B,OAAOf,OAAOI,SAAP,CAAiBM,KAAjB,CAAuBmC,OAAvB,CAAb;AACA,UAAG9B,QAAQqB,SAAX,EAAsB;AACtBW,cAAQC,GAAR,CAAYjC,KAAKkC,MAAjB;AACA,UAAIlC,KAAKW,IAAL,IAAakB,cAAcnB,MAA3B,IAAqCV,KAAKa,QAAL,IAAiBgB,cAAcjB,UAApE,IAAkFZ,KAAKmC,KAAL,GAAa,EAAnG,EAAsG;AACpGnC,aAAKmC,KAAL,IAAc,CAAd;AACAlD,eAAOI,SAAP,CAAiB+B,UAAjB,CAA4BU,OAA5B,EAAqC9B,IAArC;AACA6B,sBAAcjC,kBAAd,CAAiC,SAAjC,EAA4C;AAC1CwC,6BAAmBP,cAAc/B,EADS;AAE1CuC,6BAAmBpD,OAAOa;AAFgB,SAA5C;AAIAb,eAAOqD,eAAP,CAAuB,YAAvB;AACAT,sBAAcU,OAAd;AACA;AACD;AACF;;AAED;AACA,QAAMC,YAAYvD,OAAOI,SAAP,CAAiBoD,uBAAjB,EAAlB;AACA,QAAGD,aAAa,IAAhB,EAAqB;AACnBX,oBAAcjC,kBAAd,CAAiC,SAAjC,EAA4C;AAC1CwC,2BAAmBP,cAAc/B,EADS;AAE1CuC,2BAAmBpD,OAAOa;AAFgB,OAA5C;AAIAb,aAAOqD,eAAP,CAAuB,YAAvB;;AAEA,UAAMhB,UAAW,IAAIxC,IAAJ,CAAS+C,cAAcnB,MAAvB,EAA+B,CAA/B,EAAkCmB,cAAcjB,UAAhD,CAAjB;AACA3B,aAAOI,SAAP,CAAiB+B,UAAjB,CAA4BoB,SAA5B,EAAuClB,OAAvC;AACAO,oBAAcU,OAAd;AACD;AACF,GAjCD;AAkCD,CAlND","file":"../../../lib/plugins/inventory.js","sourcesContent":["const version = require(\"flying-squid\").version;\nconst windows = require(\"prismarine-windows\")(version).windows;\nconst Item = require(\"prismarine-item\")(version);\n\nmodule.exports.player = function(player,serv)\n{\n  player.heldItemSlot = 0;\n  player.heldItem = new Item(256, 1);\n  player.inventory = new windows.InventoryWindow(0, \"Inventory\", 44);\n  \n  player._client.on(\"held_item_slot\", ({slotId} = {}) => {\n    player.heldItemSlot = slotId;\n    player.setEquipment(0,player.inventory.slots[36 + player.heldItemSlot]);\n\n    player._writeOthersNearby(\"entity_equipment\",{\n        entityId: player.id,\n        slot: 0,\n        item: Item.toNotch(player.heldItem)\n    });\n  });\n  \n  player._client.on(\"window_click\", function(clickInfo){\n    // Do other stuff the inventory doesn't do, eg spawn the dropped item.\n    // I've left in stuff that inventory handles, because the cancelling hooks\n    // might go here (?)\n    switch(clickInfo.mode){\n      case 0:\n        if(clickInfo.mouseButton == 0){\n          // Left mouse click\n          // Inventory deals with this\n        }else{\n          // Right mouse click\n          // Inventory deals with this\n        }\n      break;\n      \n      case 1:\n        if(clickInfo.mouseButton == 0){\n          // Shift + Left click\n          // Inventory deals with this\n          return;\n        }else{\n          // Shift + right click\n          // Inventory deals with this\n          return;\n        }\n      break;\n      \n      case 2:\n        // button 0 -> 8, indication hotbar switching items\n        // (Nothing to do with held_item_slot)\n        // DANGER! crashes because windows.js hasn't implemented it yet.\n        return;\n      break;\n      \n      case 3:\n        // Middle click\n        // DANGER! crashes because windows.js hasn't implemented it yet.\n        return;\n      break;\n      \n      case 4:\n        if(clickInfo.slot == -999){\n          // Click with nothing outside window. Do nothing.\n        }else{\n          // I'd love to implement this, but dropped entities are not finished.\n          if(clickInfo.mouseButton == 0){\n            // Drop one item at slot\n            // Inventory handles removing one\n            \n            const heldItem = player.inventory.slots[36+player.heldItemSlot];\n            serv.spawnObject(2, player.world, player.position, {\n              velocity: new Vec3(0, 0, 0),\n              itemId: heldItem.type,\n              itemDamage: heldItem.metadata,\n              pickupTime: 500,\n              deathTime: 60 * 5 * 100\n            });\n          }else{\n            // Drop full stack at slot\n            // Inventory handles removing the whole stack\n            return;\n          }\n        }\n      break;\n      \n      // Inventory does not support dragging yet, so not implementing yet.\n      case 5:\n        if(clickInfo.slot == -999){\n          switch(clickInfo.mouseButton){\n            case 0:\n              // Start left mouse drag\n              return;\n            break;\n            \n            case 4:\n              // Start right mouse drag\n              return;\n            break;\n            \n            case 2:\n              // End left mouse drag\n              return;\n            break;\n            \n            case 6:\n              // End right mouse drag\n              return;\n            break;\n          }\n        }else{\n          switch(clickInfo.mouseButton){\n            case 1:\n              // Add slot for left mouse drag\n              return;\n            break;\n            \n            case 5:\n              // Add slot for right mouse drag\n              return;\n            break;\n          }\n        }\n      break;\n      \n      // Inventory does not support double click yet, so not implementing yet.\n      case 6:\n        // Double click\n        return;\n      break;\n    }\n    \n    // Let the inventory know of the click.\n    // It's important to let it know of the click later, because it destroys\n    // information we need about the inventory.\n    try {\n      player.inventory.acceptClick(clickInfo)\n    }\n    catch(err) {\n      serv.emit('error',err);\n    }\n  });\n  \n  player._client.on(\"set_creative_slot\", ({slot,item} ={}) => {\n    if(item.blockId == -1){\n      player.inventory.updateSlot(slot, undefined);\n      return;\n    }\n\n    const newItem = Item.fromNotch(item);\n    player.inventory.updateSlot(slot, newItem);\n  });\n  \n  player.inventory.on(\"windowUpdate\", function(slot,oldItem,newItem){\n\n    const equipments={\n      5:4,\n      6:3,\n      7:2,\n      8:1\n    };\n    equipments[player.heldItemSlot]=0;\n    if(equipments[slot]!==undefined) {\n      player.setEquipment(equipments[slot],newItem);\n      player._writeOthersNearby(\"entity_equipment\", {\n        entityId: player.id,\n        slot: equipments[slot],\n        item: Item.toNotch(newItem)\n      });\n    }\n\n    player._client.write(\"set_slot\", {\n      windowId: 0,\n      slot: slot,\n      item: Item.toNotch(newItem)\n    });\n  });\n\n\n\n  player.collect = (collectEntity) => {\n\n    // Add it to a stack already in the player's inventory if possible\n    for(let itemKey=0;itemKey<player.inventory.slots.length;itemKey++) {\n      const item = player.inventory.slots[itemKey];\n      if(item == undefined) continue;\n      console.log(item.damage);\n      if (item.type == collectEntity.itemId && item.metadata == collectEntity.itemDamage && item.count < 64){\n        item.count += 1;\n        player.inventory.updateSlot(itemKey, item);\n        collectEntity._writeOthersNearby('collect', {\n          collectedEntityId: collectEntity.id,\n          collectorEntityId: player.id\n        });\n        player.playSoundAtSelf('random.pop');\n        collectEntity.destroy();\n        return;\n      }\n    }\n\n    // If we couldn't add it to a already existing stack, put it in a new stack if the inventory has room\n    const emptySlot = player.inventory.firstEmptyInventorySlot();\n    if(emptySlot != null){\n      collectEntity._writeOthersNearby('collect', {\n        collectedEntityId: collectEntity.id,\n        collectorEntityId: player.id\n      });\n      player.playSoundAtSelf('random.pop');\n\n      const newItem =  new Item(collectEntity.itemId, 1, collectEntity.itemDamage);\n      player.inventory.updateSlot(emptySlot, newItem);\n      collectEntity.destroy()\n    }\n  };\n};\n"]}