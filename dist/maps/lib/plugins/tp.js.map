{"version":3,"sources":["lib/plugins/tp.js"],"names":["Vec3","require","UserError","module","exports","player","serv","commands","add","base","aliases","info","usage","op","parse","str","match","split","action","args","length","entities_from","selectorString","entity_to","forEach","e","teleport","position","scaled","x","posFromString","y","z"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,EAAgBD,IAA7B;AACA,IAAME,YAAYD,QAAQ,cAAR,EAAwBC,SAA1C;;AAEAC,OAAOC,OAAP,CAAeC,MAAf,GAAwB,UAACA,MAAD,EAASC,IAAT,EAAkB;;AAExCD,SAAOE,QAAP,CAAgBC,GAAhB,CAAoB;AAClBC,UAAM,UADY;AAElBC,aAAS,CAAC,IAAD,CAFS;AAGlBC,UAAM,sBAHY;AAIlBC,WAAO,6DAJW;AAKlBC,QAAI,IALc;AAMlBC,SANkB,iBAMZC,GANY,EAMP;AACT,aAAOA,IAAIC,KAAJ,CAAU,6CAAV,IAA2DD,IAAIE,KAAJ,CAAU,GAAV,CAA3D,GAA4E,KAAnF;AACD,KARiB;AASlBC,UATkB,kBASXC,IATW,EASL;AACX,UAAGA,KAAKC,MAAL,KAAgB,CAAnB,EAAsB;AACpB,YAAIC,gBAAgBhB,OAAOiB,cAAP,CAAsBH,KAAK,CAAL,CAAtB,CAApB;AACA,YAAII,YAAYlB,OAAOiB,cAAP,CAAsBH,KAAK,CAAL,CAAtB,CAAhB;AACA,YAAGI,UAAUH,MAAV,IAAkB,CAArB,EAAwB,MAAM,IAAIlB,SAAJ,CAAc,gBAAd,CAAN;AACxBqB,oBAAYA,UAAU,CAAV,CAAZ;;AAEAF,sBAAcG,OAAd,CAAsB;AAAA,iBAAKC,EAAEC,QAAF,CAAWH,UAAUI,QAAV,CAAmBC,MAAnB,CAA0B,IAAE,EAA5B,CAAX,CAAL;AAAA,SAAtB;AACD,OAPD,MAOO,IAAGT,KAAKC,MAAL,KAAgB,CAAnB,EAAsB;AAC3B,YAAIS,IAAIvB,KAAKwB,aAAL,CAAmBX,KAAK,CAAL,CAAnB,EAA4Bd,OAAOsB,QAAP,CAAgBE,CAAhB,GAAoB,EAAhD,CAAR;AACA,YAAIE,IAAIzB,KAAKwB,aAAL,CAAmBX,KAAK,CAAL,CAAnB,EAA4Bd,OAAOsB,QAAP,CAAgBI,CAAhB,GAAoB,EAAhD,CAAR;AACA,YAAIC,IAAI1B,KAAKwB,aAAL,CAAmBX,KAAK,CAAL,CAAnB,EAA4Bd,OAAOsB,QAAP,CAAgBK,CAAhB,GAAoB,EAAhD,CAAR;;AAEA3B,eAAOqB,QAAP,CAAgB,IAAI1B,IAAJ,CAAS6B,CAAT,EAAYE,CAAZ,EAAeC,CAAf,CAAhB;AAED,OAPM,MAOA,IAAGb,KAAKC,MAAL,KAAgB,CAAnB,EAAsB;AAC3B,YAAIC,iBAAgBhB,OAAOiB,cAAP,CAAsBH,KAAK,CAAL,CAAtB,CAApB;;AAEAE,uBAAcG,OAAd,CAAsB;AAAA,iBAAKC,EAAEC,QAAF,CAAW,IAAI1B,IAAJ,CACpCM,KAAKwB,aAAL,CAAmBX,KAAK,CAAL,CAAnB,EAA4BM,EAAEE,QAAF,CAAWE,CAAX,GAAe,EAA3C,CADoC,EAEpCvB,KAAKwB,aAAL,CAAmBX,KAAK,CAAL,CAAnB,EAA4BM,EAAEE,QAAF,CAAWI,CAAX,GAAe,EAA3C,CAFoC,EAGpCzB,KAAKwB,aAAL,CAAmBX,KAAK,CAAL,CAAnB,EAA4BM,EAAEE,QAAF,CAAWK,CAAX,GAAe,EAA3C,CAHoC,CAAX,CAAL;AAAA,SAAtB;AAKD;AACF;AAjCiB,GAApB;AAmCD,CArCD","file":"../../../lib/plugins/tp.js","sourcesContent":["const Vec3 = require(\"vec3\").Vec3;\nconst UserError = require('flying-squid').UserError;\n\nmodule.exports.player = (player, serv) => {\n\n  player.commands.add({\n    base: 'teleport',\n    aliases: ['tp'],\n    info: 'to teleport a player',\n    usage: '/teleport [target player] <destination player or x> [y] [z]',\n    op: true,\n    parse(str) {\n      return str.match(/^(((.* )?~?-?\\d* ~?-?\\d* ~?-?\\d*)|(.+ .+))$/) ? str.split(' ') : false;\n    },\n    action(args) {\n      if(args.length === 2) {\n        let entities_from = player.selectorString(args[0]);\n        let entity_to = player.selectorString(args[1]);\n        if(entity_to.length==0) throw new UserError('Invalid target');\n        entity_to = entity_to[0];\n\n        entities_from.forEach(e => e.teleport(entity_to.position.scaled(1/32)));\n      } else if(args.length === 3) {\n        let x = serv.posFromString(args[0], player.position.x / 32);\n        let y = serv.posFromString(args[1], player.position.y / 32);\n        let z = serv.posFromString(args[2], player.position.z / 32);\n        \n        player.teleport(new Vec3(x, y, z));\n\n      } else if(args.length === 4) {\n        let entities_from = player.selectorString(args[0]);\n\n        entities_from.forEach(e => e.teleport(new Vec3(\n          serv.posFromString(args[1], e.position.x / 32),\n          serv.posFromString(args[2], e.position.y / 32),\n          serv.posFromString(args[3], e.position.z / 32)\n        )));\n      }\n    }\n  });\n};\n"]}