{"version":3,"sources":["lib/plugins/world.js"],"names":["spiralloop","require","World","generations","module","exports","server","serv","worldFolder","generation","newSeed","options","seed","Math","floor","random","pow","regionFolder","stat","stats","mkdir","readLevel","levelData","writeLevel","emit","generationModule","name","overworld","netherworld","blockEntityData","portals","pregenWorld","world","size","promises","x","z","push","getColumn","all","setBlock","position","blockType","blockData","players","filter","p","forEach","player","sendBlock","setBlockType","setBlockData","reloadChunks","chunks","chunkX","chunkZ","oPlayer","loadedChunks","undefined","unloadChunk","sendRestMap","settings","_client","write","groundUp","bitMap","chunkData","Buffer","sendChunk","column","behavior","chunk","dump","resolve","spiral","arr","t","sendNearbyChunks","view","group","lastPositionChunkUpdated","playerChunkX","playerChunkZ","map","key","split","parseInt","a","abs","loaded","reduce","acc","then","sleep","ms","setTimeout","r","sendMap","min","catch","err","sendingChunks","sendSpawnPosition","spawnPoint","changeWorld","opt","gamemode","gameMode","dimension","difficulty","levelType","findSpawnPoint","toFixedPosition","updateAndSpawn","sendSelfPosition","waitPlayerLogin","commands","add","base","info","usage","op","action"],"mappings":"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","file":"../../../lib/plugins/world.js","sourcesContent":["const spiralloop = require('spiralloop');\n\nconst World = require('prismarine-world')(require(\"../version\"));\n\nconst generations=require(\"flying-squid\").generations;\nimport {fs} from 'node-promise-es6';\nimport {level} from 'prismarine-provider-anvil';\n\nmodule.exports.server=async function(serv,{worldFolder,generation={\"name\":\"diamond_square\",\"options\":{\"worldHeight\":80}}}={}) {\n  const newSeed=generation.options.seed || Math.floor(Math.random()*Math.pow(2, 31));\n  let seed;\n  let regionFolder;\n  if(worldFolder) {\n    regionFolder = worldFolder + \"/region\";\n    try {\n      const stats = await fs.stat(regionFolder);\n    }\n    catch (err) {\n      await fs.mkdir(regionFolder);\n    }\n\n    try {\n      const levelData = await level.readLevel(worldFolder + \"/level.dat\");\n      seed = levelData[\"RandomSeed\"][0];\n    }\n    catch (err) {\n      seed = newSeed;\n      await level.writeLevel(worldFolder + \"/level.dat\", {\"RandomSeed\": [seed, 0]});\n    }\n  }\n  else\n    seed=newSeed;\n  generation.options.seed=seed;\n  serv.emit(\"seed\",generation.options.seed);\n  const generationModule=generations[generation.name] ? generations[generation.name] : require(generation.name);\n  serv.overworld = new World(generationModule(generation.options), regionFolder);\n  serv.netherworld = new World(generations[\"nether\"]({}));\n  //serv.endworld = new World(generations[\"end\"]({}));\n\n  // WILL BE REMOVED WHEN ACTUALLY IMPLEMENTED\n  serv.overworld.blockEntityData = {};\n  serv.netherworld.blockEntityData = {};\n  serv.overworld.portals = [];\n  serv.netherworld.portals = [];\n  //////////////\n\n  serv.pregenWorld = (world, size=3) => {\n    const promises = [];\n    for (let x = -size; x < size; x++) {\n      for (let z = -size; z < size; z++) {\n        promises.push(world.getColumn(x, z));\n      }\n    }\n    return Promise.all(promises);\n  };\n\n  serv.setBlock = async (world,position,blockType,blockData) =>\n  {\n    serv.players\n      .filter(p => p.world==world)\n      .forEach(player => player.sendBlock(position, blockType, blockData));\n\n    await world.setBlockType(position,blockType);\n    await world.setBlockData(position,blockData);\n  };\n\n  serv.reloadChunks = (world,chunks) => {\n    serv.players\n      .filter(player => player.world==world)\n      .forEach(oPlayer => {\n      chunks\n        .filter(({chunkX,chunkZ}) => oPlayer.loadedChunks[chunkX+\",\"+chunkZ]!==undefined)\n        .forEach(({chunkX,chunkZ}) => oPlayer.unloadChunk(chunkX,chunkZ));\n      oPlayer.sendRestMap();\n    })\n  };\n\n  //serv.pregenWorld(serv.overworld).then(() => serv.log('Pre-Generated Overworld'));\n  //serv.pregenWorld(serv.netherworld).then(() => serv.log('Pre-Generated Nether'));\n};\n\nmodule.exports.player=function(player,serv,settings) {\n\n  player.unloadChunk = (chunkX,chunkZ) =>\n  {\n    delete player.loadedChunks[chunkX+\",\"+chunkZ];\n    player._client.write('map_chunk', {\n      x: chunkX,\n      z: chunkZ,\n      groundUp: true,\n      bitMap: 0x0000,\n      chunkData: new Buffer(0)\n    });\n  };\n\n  player.sendChunk = (chunkX,chunkZ,column) =>\n  {\n    return player.behavior('sendChunk', {\n      x: chunkX,\n      z: chunkZ,\n      chunk: column\n    }, ({x, z, chunk}) => {\n      player._client.write('map_chunk', {\n        x: x,\n        z: z,\n        groundUp: true,\n        bitMap: 0xffff,\n        chunkData: chunk.dump()\n      });\n      return Promise.resolve();\n    })\n  };\n\n  function spiral(arr)\n  {\n    const t=[];\n    spiralloop(arr,(x,z) => {\n      t.push([x,z]);\n    });\n    return t;\n  }\n\n  player.sendNearbyChunks = (view,group) =>\n  {\n    player.lastPositionChunkUpdated=player.position;\n    const playerChunkX=Math.floor(player.position.x/16/32);\n    const playerChunkZ=Math.floor(player.position.z/16/32);\n\n    Object.keys(player.loadedChunks)\n      .map((key) => key.split(\",\").map(a => parseInt(a)))\n      .filter(([x,z]) => Math.abs(x-playerChunkX)>view || Math.abs(z-playerChunkZ)>view)\n      .forEach(([x,z]) => player.unloadChunk(x,z));\n\n    return spiral([view*2,view*2])\n      .map(t => ({\n        chunkX:playerChunkX+t[0]-view,\n        chunkZ:playerChunkZ+t[1]-view\n      }))\n      .filter(({chunkX,chunkZ}) => {\n        const key=chunkX+\",\"+chunkZ;\n        const loaded=player.loadedChunks[key];\n        if(!loaded) player.loadedChunks[key]=1;\n        return !loaded;\n      })\n      .reduce((acc,{chunkX,chunkZ})=> {\n          const p=acc\n            .then(() => player.world.getColumn(chunkX, chunkZ))\n            .then((column) => player.sendChunk(chunkX, chunkZ, column));\n           return group ? p.then(() => sleep(5)) : p;\n        }\n      ,Promise.resolve());\n  };\n\n  function sleep(ms = 0) {\n    return new Promise(r => setTimeout(r, ms));\n  }\n\n  player.sendMap = () =>\n  {\n    return player.sendNearbyChunks(Math.min(3,settings[\"view-distance\"]))\n      .catch((err) => setTimeout(() => { throw err; }), 0);\n  };\n\n  player.sendRestMap = () =>\n  {\n    player.sendingChunks=true;\n    player.sendNearbyChunks(Math.min(player.view,settings[\"view-distance\"]),true)\n      .then(() => player.sendingChunks=false)\n      .catch((err)=> setTimeout(() => {throw err;},0));\n  };\n\n  player.sendSpawnPosition = () =>\n  {\n    player._client.write('spawn_position',{\n      \"location\":player.spawnPoint\n    });\n  };\n\n  player.changeWorld = async (world, opt) => {\n    if(player.world == world) return Promise.resolve();\n    opt = opt || {};\n    player.world = world;\n    player.loadedChunks={};\n    if (typeof opt.gamemode != 'undefined') player.gameMode = opt.gamemode;\n    player._client.write(\"respawn\",{\n      dimension: opt.dimension || 0,\n      difficulty: opt.difficulty || serv.difficulty,\n      gamemode: opt.gamemode || player.gameMode,\n      levelType:'default'\n    });\n    await player.findSpawnPoint();\n    player.position=player.spawnPoint.toFixedPosition();\n    player.sendSpawnPosition();\n    player.updateAndSpawn();\n\n    await player.sendMap();\n\n    player.sendSelfPosition();\n    player.emit('change_world');\n\n    await player.waitPlayerLogin();\n    player.sendRestMap();\n\n  };\n\n  player.commands.add({\n    base: 'changeworld',\n    info: 'to change world',\n    usage: '/changeworld overworld|nether',\n    op: true,\n    action(world) {\n      if(world==\"nether\") player.changeWorld(serv.netherworld, {dimension: -1});\n      if(world==\"overworld\") player.changeWorld(serv.overworld, {dimension: 0});\n    }\n  });\n};\n"]}