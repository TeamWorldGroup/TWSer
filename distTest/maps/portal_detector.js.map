{"version":3,"sources":["portal_detector.js"],"names":["require","portal_detector","detectFrame","findPotentialLines","findBorder","getAir","generateLine","generatePortal","makeWorldWithPortal","Vec3","assert","range","describe","it","deepEqual","bottom","left","right","top","air","concat","timeout","portalData","push","name","bottomLeft","direction","width","height","additionalAir","additionalObsidian","apply","forEach","portal","expectedBorder","world","before","potentialLines","include","length","scaled","border","portals","foundAir"],"mappings":"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","file":"../portal_detector.js","sourcesContent":["const {detectFrame,findPotentialLines,findBorder,getAir,generateLine,generatePortal,makeWorldWithPortal}=require(\"flying-squid\").portal_detector;\nconst Vec3 = require(\"vec3\").Vec3;\nconst assert = require('chai').assert;\nconst range = require('range').range;\n\n\ndescribe(\"Generate portal\",function(){\n  it(\"generate a line\",() => {\n    assert.deepEqual(generateLine(new Vec3(3,1,1),new Vec3(1,0,0),2),[new Vec3(3, 1, 1), new Vec3(4, 1, 1)])\n  });\n  it(\"generate a portal\", () => {\n    assert.deepEqual(generatePortal(new Vec3(2,1,1),new Vec3(1,0,0),4,5),{\n      bottom:generateLine(new Vec3(3,1,1),new Vec3(1,0,0),2),\n      left:generateLine(new Vec3(2,2,1),new Vec3(0,1,0),3),\n      right:generateLine(new Vec3(5,2,1),new Vec3(0,1,0),3),\n      top:generateLine(new Vec3(3,5,1),new Vec3(1,0,0),2),\n      air:generateLine(new Vec3(3,2,1),new Vec3(0,1,0),3).concat(generateLine(new Vec3(4,2,1),new Vec3(0,1,0),3))\n    })\n  });\n});\n\ndescribe(\"Detect portal\", function() {\n  this.timeout(60 * 1000);\n  const portalData=[];\n  portalData.push({\n    name:\"simple portal frame x\",\n    bottomLeft:new Vec3(2,1,1),\n    direction:new Vec3(1,0,0),\n    width:4,\n    height:5,\n    additionalAir:[],\n    additionalObsidian:[]\n  });\n  portalData.push({\n    name:\"simple portal frame z\",\n    bottomLeft:new Vec3(2,1,1),\n    direction:new Vec3(0,0,1),\n    width:4,\n    height:5,\n    additionalAir:[],\n    additionalObsidian:[]\n  });\n  portalData.push({\n    name:\"big simple portal frame x\",\n    bottomLeft:new Vec3(2,1,1),\n    direction:new Vec3(1,0,0),\n    width:10,\n    height:10,\n    additionalAir:[],\n    additionalObsidian:[]\n  });\n  portalData.push({\n    name:\"simple portal frame x with borders\",\n    bottomLeft:new Vec3(2,1,1),\n    direction:new Vec3(1,0,0),\n    width:4,\n    height:5,\n    additionalAir:[],\n    additionalObsidian:[new Vec3(2,1,1),new Vec3(5,1,1),new Vec3(2,6,1),new Vec3(5,6,1)]\n  });\n  const {bottom,left,right,top,air}=generatePortal(new Vec3(2,1,2),new Vec3(1,0,0),4,5);\n\n  portalData.push({\n    name:\"2 portals\",\n    bottomLeft:new Vec3(2,1,1),\n    direction:new Vec3(1,0,0),\n    width:4,\n    height:5,\n    additionalAir:air,\n    additionalObsidian:[].concat.apply([], [bottom, left, right,top])\n  });\n\n\n  portalData.push({\n    name:\"huge simple portal frame z\",\n    bottomLeft:new Vec3(2,1,1),\n    direction:new Vec3(0,0,1),\n    width:50,\n    height:50,\n    additionalAir:[],\n    additionalObsidian:[]\n  });\n\n\n  portalData.forEach(({name,bottomLeft,direction,width,height,additionalAir,additionalObsidian}) => {\n    const portal=generatePortal(bottomLeft,direction,width,height);\n    const {bottom,left,right,top,air}=portal;\n    describe(\"Detect \"+name,() => {\n      const expectedBorder={bottom,left,right,top};\n\n      let world;\n      before(async function(){\n        world=await makeWorldWithPortal(portal,additionalAir,additionalObsidian);\n      });\n\n\n      describe(\"detect potential first lines\",function(){\n        it(\"detect potential first lines from bottom left\", async function() {\n          let potentialLines=await findPotentialLines(world,bottom[0],new Vec3(0,1,0));\n          assert.include(potentialLines,{\n              \"direction\": direction,\n              \"line\": bottom\n            });\n        });\n\n        it(\"detect potential first lines from bottom right\", async function() {\n          let potentialLines=await findPotentialLines(world,bottom[bottom.length-1],new Vec3(0,1,0));\n          assert.include(potentialLines,{\n              \"direction\": direction,\n              \"line\": bottom\n            });\n        });\n\n\n        it(\"detect potential first lines from top left\", async function() {\n          let potentialLines=await findPotentialLines(world,top[0],new Vec3(0,-1,0));\n          assert.include(potentialLines,{\n              \"direction\": direction,\n              \"line\": top\n            });\n        });\n\n        it(\"detect potential first lines from top right\", async function() {\n          let potentialLines=await findPotentialLines(world,top[top.length-1],new Vec3(0,-1,0));\n          assert.include(potentialLines,{\n              \"direction\": direction,\n              \"line\": top\n            });\n        });\n\n        it(\"detect potential first lines from left top\", async function() {\n          let potentialLines=await findPotentialLines(world,left[left.length-1],direction);\n          assert.include(potentialLines,{\n              \"direction\": new Vec3(0,1,0),\n              \"line\": left\n            });\n        });\n\n        it(\"detect potential first lines from right bottom\", async function() {\n          let potentialLines=await findPotentialLines(world,right[0],direction.scaled(-1));\n          assert.include(potentialLines,{\n              \"direction\": new Vec3(0,1,0),\n              \"line\": right\n            });\n        });\n      });\n\n\n      describe(\"find borders\",function() {\n        it(\"find borders from bottom\", async function () {\n          const border = await findBorder(world, {\n            \"direction\": direction,\n            \"line\": bottom\n          }, new Vec3(0, 1, 0));\n          assert.deepEqual(border, expectedBorder)\n        });\n\n        it(\"find borders from top\", async function () {\n          const border = await findBorder(world, {\n            \"direction\": direction,\n            \"line\": top\n          }, new Vec3(0, -1, 0));\n          assert.deepEqual(border, expectedBorder)\n        });\n\n        it(\"find borders from left\", async function () {\n          const border = await findBorder(world, {\n            \"direction\": new Vec3(0, 1, 0),\n            \"line\": left\n          },direction);\n          assert.deepEqual(border, expectedBorder)\n        });\n        it(\"find borders from right\", async function () {\n          const border = await findBorder(world, {\n            \"direction\": new Vec3(0, 1, 0),\n            \"line\": right\n          }, direction.scaled(-1));\n          assert.deepEqual(border, expectedBorder)\n        });\n      });\n\n      describe(\"detect portals\",function(){\n        it(\"detect portals from bottom left\",async function() {\n          const portals=await detectFrame(world,bottom[0],new Vec3(0,1,0));\n          assert.deepEqual(portals,[portal])\n        });\n        it(\"detect portals from top left\",async function() {\n          const portals=await detectFrame(world,top[0],new Vec3(0,-1,0));\n          assert.deepEqual(portals,[portal])\n        });\n        it(\"detect portals from right top\",async function() {\n          const portals=await detectFrame(world,right[right.length-1],direction.scaled(-1));\n          assert.deepEqual(portals,[portal])\n        })\n      });\n\n      it(\"get air\",function(){\n        const foundAir=getAir(expectedBorder);\n        assert.deepEqual(foundAir,air);\n      });\n    });\n  });\n\n\n});\n\n\ndescribe(\"Doesn't detect non-portal\",function() {\n  const portalData=[];\n\n  portalData.push({\n    name:\"simple portal frame x with one obsidian in the middle\",\n    bottomLeft:new Vec3(2,1,1),\n    direction:new Vec3(1,0,0),\n    width:5,\n    height:5,\n    additionalAir:[],\n    additionalObsidian:[new Vec3(4,3,1)]\n  });\n\n  portalData.forEach(({name,bottomLeft,direction,width,height,additionalAir,additionalObsidian}) => {\n    const portal = generatePortal(bottomLeft, direction, width, height);\n    const {bottom,left,right,top}=portal;\n    describe(\"Doesn't detect detect \" + name, () => {\n      let world;\n      before(async function () {\n        world=await makeWorldWithPortal(portal, additionalAir, additionalObsidian);\n      });\n\n      describe(\"doesn't detect portals\",function(){\n        it(\"doesn't detect portals from bottom left\",async function() {\n          const portals=await detectFrame(world,bottom[0],new Vec3(0,1,0));\n          assert.deepEqual(portals,[])\n        });\n        it(\"doesn't detect portals from top left\",async function() {\n          const portals=await detectFrame(world,top[0],new Vec3(0,-1,0));\n          assert.deepEqual(portals,[])\n        });\n        it(\"doesn't detect portals from right top\",async function() {\n          const portals=await detectFrame(world,right[right.length-1],direction.scaled(-1));\n          assert.deepEqual(portals,[])\n        })\n      });\n\n    });\n  });\n});\n"]}